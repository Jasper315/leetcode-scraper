[
  {
    "questionId": "3818",
    "questionFrontendId": "3476",
    "title": "Maximize Profit from Task Assignment",
    "titleSlug": "maximize-profit-from-task-assignment",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": null,
    "sampleTestCase": "[1,2,3,4,5]\n[[1,100],[2,400],[3,100],[3,400]]"
  },
  {
    "questionId": "3816",
    "questionFrontendId": "3475",
    "title": "DNA Pattern Recognition ",
    "titleSlug": "dna-pattern-recognition",
    "content": "<p>Table: <code>Samples</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    | \n+----------------+---------+\n| sample_id      | int     |\n| dna_sequence   | varchar |\n| species        | varchar |\n+----------------+---------+\nsample_id is the unique key for this table.\nEach row contains a DNA sequence represented as a string of characters (A, T, G, C) and the species it was collected from.\n</pre>\n\n<p>Biologists are studying basic patterns in DNA sequences. Write a solution to identify <code>sample_id</code> with the following patterns:</p>\n\n<ul>\n\t<li>Sequences that <strong>start</strong> with <strong>ATG</strong>&nbsp;(a common <strong>start codon</strong>)</li>\n\t<li>Sequences that <strong>end</strong> with either <strong>TAA</strong>, <strong>TAG</strong>, or <strong>TGA</strong>&nbsp;(<strong>stop codons</strong>)</li>\n\t<li>Sequences containing the motif <strong>ATAT</strong>&nbsp;(a simple repeated pattern)</li>\n\t<li>Sequences that have <strong>at least</strong> <code>3</code> <strong>consecutive</strong> <strong>G</strong>&nbsp;(like <strong>GGG</strong>&nbsp;or <strong>GGGG</strong>)</li>\n</ul>\n\n<p>Return <em>the result table ordered by&nbsp;</em><em>sample_id in <strong>ascending</strong> order</em>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>Samples table:</p>\n\n<pre class=\"example-io\">\n+-----------+------------------+-----------+\n| sample_id | dna_sequence     | species   |\n+-----------+------------------+-----------+\n| 1         | ATGCTAGCTAGCTAA  | Human     |\n| 2         | GGGTCAATCATC     | Human     |\n| 3         | ATATATCGTAGCTA   | Human     |\n| 4         | ATGGGGTCATCATAA  | Mouse     |\n| 5         | TCAGTCAGTCAG     | Mouse     |\n| 6         | ATATCGCGCTAG     | Zebrafish |\n| 7         | CGTATGCGTCGTA    | Zebrafish |\n+-----------+------------------+-----------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+-----------+------------------+-------------+-------------+------------+------------+------------+\n| sample_id | dna_sequence     | species     | has_start   | has_stop   | has_atat   | has_ggg    |\n+-----------+------------------+-------------+-------------+------------+------------+------------+\n| 1         | ATGCTAGCTAGCTAA  | Human       | 1           | 1          | 0          | 0          |\n| 2         | GGGTCAATCATC     | Human       | 0           | 0          | 0          | 1          |\n| 3         | ATATATCGTAGCTA   | Human       | 0           | 0          | 1          | 0          |\n| 4         | ATGGGGTCATCATAA  | Mouse       | 1           | 1          | 0          | 1          |\n| 5         | TCAGTCAGTCAG     | Mouse       | 0           | 0          | 0          | 0          |\n| 6         | ATATCGCGCTAG     | Zebrafish   | 0           | 1          | 1          | 0          |\n| 7         | CGTATGCGTCGTA    | Zebrafish   | 0           | 0          | 0          | 0          |\n+-----------+------------------+-------------+-------------+------------+------------+------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Sample 1 (ATGCTAGCTAGCTAA):\n\t<ul>\n\t\t<li>Starts with ATG&nbsp;(has_start = 1)</li>\n\t\t<li>Ends with TAA&nbsp;(has_stop = 1)</li>\n\t\t<li>Does not contain ATAT&nbsp;(has_atat = 0)</li>\n\t\t<li>Does not contain at least 3 consecutive &#39;G&#39;s (has_ggg = 0)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 2 (GGGTCAATCATC):\n\t<ul>\n\t\t<li>Does not start with ATG&nbsp;(has_start = 0)</li>\n\t\t<li>Does not end with TAA, TAG, or TGA&nbsp;(has_stop = 0)</li>\n\t\t<li>Does not contain ATAT&nbsp;(has_atat = 0)</li>\n\t\t<li>Contains GGG&nbsp;(has_ggg = 1)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 3 (ATATATCGTAGCTA):\n\t<ul>\n\t\t<li>Does not start with ATG&nbsp;(has_start = 0)</li>\n\t\t<li>Does not end with TAA, TAG, or TGA&nbsp;(has_stop = 0)</li>\n\t\t<li>Contains ATAT&nbsp;(has_atat = 1)</li>\n\t\t<li>Does not contain at least 3 consecutive &#39;G&#39;s (has_ggg = 0)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 4 (ATGGGGTCATCATAA):\n\t<ul>\n\t\t<li>Starts with ATG&nbsp;(has_start = 1)</li>\n\t\t<li>Ends with TAA&nbsp;(has_stop = 1)</li>\n\t\t<li>Does not contain ATAT&nbsp;(has_atat = 0)</li>\n\t\t<li>Contains GGGG&nbsp;(has_ggg = 1)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 5 (TCAGTCAGTCAG):\n\t<ul>\n\t\t<li>Does not match any patterns (all fields = 0)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 6 (ATATCGCGCTAG):\n\t<ul>\n\t\t<li>Does not start with ATG&nbsp;(has_start = 0)</li>\n\t\t<li>Ends with TAG&nbsp;(has_stop = 1)</li>\n\t\t<li>Starts with ATAT&nbsp;(has_atat = 1)</li>\n\t\t<li>Does not contain at least 3 consecutive &#39;G&#39;s (has_ggg = 0)</li>\n\t</ul>\n\t</li>\n\t<li>Sample 7 (CGTATGCGTCGTA):\n\t<ul>\n\t\t<li>Does not start with ATG&nbsp;(has_start = 0)</li>\n\t\t<li>Does not end with TAA, &quot;TAG&quot;, or &quot;TGA&quot; (has_stop = 0)</li>\n\t\t<li>Does not contain ATAT&nbsp;(has_atat = 0)</li>\n\t\t<li>Does not contain at least 3 consecutive &#39;G&#39;s (has_ggg = 0)</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The result is ordered by sample_id in ascending order</li>\n\t<li>For each pattern, 1 indicates the pattern is present and 0 indicates it is not present</li>\n</ul>\n</div>\n",
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef analyze_dna_patterns(samples: pd.DataFrame) -> pd.DataFrame:\n    "
      },
      {
        "lang": "PostgreSQL",
        "langSlug": "postgresql",
        "code": "-- Write your PostgreSQL query statement below\n"
      }
    ],
    "sampleTestCase": "{\"headers\":{\"Samples\":[\"sample_id\",\"dna_sequence\",\"species\"]},\"rows\":{\"Samples\":[[1,\"ATGCTAGCTAGCTAA\",\"Human\"],[2,\"GGGTCAATCATC\",\"Human\"],[3,\"ATATATCGTAGCTA\",\"Human\"],[4,\"ATGGGGTCATCATAA\",\"Mouse\"],[5,\"TCAGTCAGTCAG\",\"Mouse\"],[6,\"ATATCGCGCTAG\",\"Zebrafish\"],[7,\"CGTATGCGTCGTA\",\"Zebrafish\"]]}}"
  },
  {
    "questionId": "3806",
    "questionFrontendId": "3466",
    "title": "Maximum Coin Collection ",
    "titleSlug": "maximum-coin-collection",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": null,
    "sampleTestCase": "[1,-2,-10,3]\n[-5,10,0,1]"
  },
  {
    "questionId": "3803",
    "questionFrontendId": "3465",
    "title": "Find Products with Valid Serial Numbers",
    "titleSlug": "find-products-with-valid-serial-numbers",
    "content": "<p>Table: <code>products</code></p>\n\n<pre>\n+--------------+------------+\n| Column Name  | Type       |\n+--------------+------------+\n| product_id   | int        |\n| product_name | varchar    |\n| description  | varchar    |\n+--------------+------------+\n(product_id) is the unique key for this table.\nEach row in the table represents a product with its unique ID, name, and description.\n</pre>\n\n<p>Write a solution to find all products whose description <strong>contains a valid serial number</strong> pattern. A valid serial number follows these rules:</p>\n\n<ul>\n\t<li>It starts with the letters <strong>SN</strong>&nbsp;(case-sensitive).</li>\n\t<li>Followed by exactly <code>4</code> digits.</li>\n\t<li>It must have a hyphen (-) <strong>followed by exactly</strong> <code>4</code> digits.</li>\n\t<li>The serial number must be within the description (it may not necessarily start at the beginning).</li>\n</ul>\n\n<p>Return <em>the result table&nbsp;ordered by</em> <code>product_id</code> <em>in <strong>ascending</strong> order</em>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>products table:</p>\n\n<pre class=\"example-io\">\n+------------+--------------+------------------------------------------------------+\n| product_id | product_name | description                                          |\n+------------+--------------+------------------------------------------------------+\n| 1          | Widget A     | This is a sample product with SN1234-5678            |\n| 2          | Widget B     | A product with serial SN9876-1234 in the description |\n| 3          | Widget C     | Product SN1234-56789 is available now                |\n| 4          | Widget D     | No serial number here                                |\n| 5          | Widget E     | Check out SN4321-8765 in this description            |\n+------------+--------------+------------------------------------------------------+\n    </pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+------------+--------------+------------------------------------------------------+\n| product_id | product_name | description                                          |\n+------------+--------------+------------------------------------------------------+\n| 1          | Widget A     | This is a sample product with SN1234-5678            |\n| 2          | Widget B     | A product with serial SN9876-1234 in the description |\n| 5          | Widget E     | Check out SN4321-8765 in this description            |\n+------------+--------------+------------------------------------------------------+\n    </pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li><strong>Product 1:</strong> Valid serial number SN1234-5678</li>\n\t<li><strong>Product 2:</strong> Valid serial number SN9876-1234</li>\n\t<li><strong>Product 3:</strong> Invalid serial number SN1234-56789 (contains 5 digits after the hyphen)</li>\n\t<li><strong>Product 4:</strong> No serial number in the description</li>\n\t<li><strong>Product 5:</strong> Valid serial number SN4321-8765</li>\n</ul>\n\n<p>The result table is ordered by product_id in ascending order.</p>\n</div>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef find_valid_serial_products(products: pd.DataFrame) -> pd.DataFrame:\n    "
      },
      {
        "lang": "PostgreSQL",
        "langSlug": "postgresql",
        "code": "-- Write your PostgreSQL query statement below\n"
      }
    ],
    "sampleTestCase": "{\"headers\":{\"products\":[\"product_id\",\"product_name\",\"description\"]},\"rows\":{\"products\":[[1,\"Widget A\",\"This is a sample product with SN1234-5678\"],[2,\"Widget B\",\"A product with serial SN9876-1234 in the description\"],[3,\"Widget C\",\"Product SN1234-56789 is available now\"],[4,\"Widget D\",\"No serial number here\"],[5,\"Widget E\",\"Check out SN4321-8765 in this description\"]]}}"
  },
  {
    "questionId": "3796",
    "questionFrontendId": "3460",
    "title": "Longest Common Prefix After at Most One Removal",
    "titleSlug": "longest-common-prefix-after-at-most-one-removal",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Two Pointers",
        "slug": "two-pointers"
      },
      {
        "name": "String",
        "slug": "string"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "\"madxa\"\n\"madam\""
  },
  {
    "questionId": "3792",
    "questionFrontendId": "3451",
    "title": "Find Invalid IP Addresses",
    "titleSlug": "find-invalid-ip-addresses",
    "content": "<p>Table: <code> logs</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| log_id      | int     |\n| ip          | varchar |\n| status_code | int     |\n+-------------+---------+\nlog_id is the unique key for this table.\nEach row contains server access log information including IP address and HTTP status code.\n</pre>\n\n<p>Write a solution to find <strong>invalid IP addresses</strong>. An IPv4 address is invalid if it meets any of these conditions:</p>\n\n<ul>\n\t<li>Contains numbers <strong>greater than</strong> <code>255</code> in any octet</li>\n\t<li>Has <strong>leading zeros</strong> in any octet (like <code>01.02.03.04</code>)</li>\n\t<li>Has <strong>less or more</strong> than <code>4</code> octets</li>\n</ul>\n\n<p>Return <em>the result table </em><em>ordered by</em> <code>invalid_count</code>,&nbsp;<code>ip</code>&nbsp;<em>in <strong>descending</strong> order respectively</em>.&nbsp;</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>logs table:</p>\n\n<pre class=\"example-io\">\n+--------+---------------+-------------+\n| log_id | ip            | status_code | \n+--------+---------------+-------------+\n| 1      | 192.168.1.1   | 200         | \n| 2      | 256.1.2.3     | 404         | \n| 3      | 192.168.001.1 | 200         | \n| 4      | 192.168.1.1   | 200         | \n| 5      | 192.168.1     | 500         | \n| 6      | 256.1.2.3     | 404         | \n| 7      | 192.168.001.1 | 200         | \n+--------+---------------+-------------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+---------------+--------------+\n| ip            | invalid_count|\n+---------------+--------------+\n| 256.1.2.3     | 2            |\n| 192.168.001.1 | 2            |\n| 192.168.1     | 1            |\n+---------------+--------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>256.1.2.3&nbsp;is invalid because 256 &gt; 255</li>\n\t<li>192.168.001.1&nbsp;is invalid because of leading zeros</li>\n\t<li>192.168.1&nbsp;is invalid because it has only 3 octets</li>\n</ul>\n\n<p>The output table is ordered by invalid_count, ip in descending order respectively.</p>\n</div>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef find_invalid_ips(logs: pd.DataFrame) -> pd.DataFrame:\n    "
      },
      {
        "lang": "PostgreSQL",
        "langSlug": "postgresql",
        "code": "-- Write your PostgreSQL query statement below\n"
      }
    ],
    "sampleTestCase": "{\"headers\":{\"logs\":[\"log_id\",\"ip\",\"status_code\"]},\"rows\":{\"logs\":[[1,\"192.168.1.1\",200],[2,\"256.1.2.3\",404],[3,\"192.168.001.1\",200],[4,\"192.168.1.1\",200],[5,\"192.168.1\",500],[6,\"256.1.2.3\",404],[7,\"192.168.001.1\",200]]}}"
  },
  {
    "questionId": "3787",
    "questionFrontendId": "3450",
    "title": "Maximum Students on a Single Bench",
    "titleSlug": "maximum-students-on-a-single-bench",
    "content": null,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "[[1,2],[2,2],[3,3],[1,3],[2,3]]"
  },
  {
    "questionId": "3786",
    "questionFrontendId": "3472",
    "title": "Longest Palindromic Subsequence After at Most K Operations",
    "titleSlug": "longest-palindromic-subsequence-after-at-most-k-operations",
    "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>.</p>\n\n<p>In one operation, you can replace the character at any position with the next or previous letter in the alphabet (wrapping around so that <code>&#39;a&#39;</code> is after <code>&#39;z&#39;</code>). For example, replacing <code>&#39;a&#39;</code> with the next letter results in <code>&#39;b&#39;</code>, and replacing <code>&#39;a&#39;</code> with the previous letter results in <code>&#39;z&#39;</code>. Similarly, replacing <code>&#39;z&#39;</code> with the next letter results in <code>&#39;a&#39;</code>, and replacing <code>&#39;z&#39;</code> with the previous letter results in <code>&#39;y&#39;</code>.</p>\n\n<p>Return the length of the <strong>longest <span data-keyword=\"palindrome-string\">palindromic</span> <span data-keyword=\"subsequence-string-nonempty\">subsequence</span></strong> of <code>s</code> that can be obtained after performing <strong>at most</strong> <code>k</code> operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abced&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Replace <code>s[1]</code> with the next letter, and <code>s</code> becomes <code>&quot;acced&quot;</code>.</li>\n\t<li>Replace <code>s[4]</code> with the previous letter, and <code>s</code> becomes <code>&quot;accec&quot;</code>.</li>\n</ul>\n\n<p>The subsequence <code>&quot;ccc&quot;</code> forms a palindrome of length 3, which is the maximum.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;</span>aaazzz<span class=\"example-io\">&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> 6</p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Replace <code>s[0]</code> with the previous letter, and <code>s</code> becomes <code>&quot;zaazzz&quot;</code>.</li>\n\t<li>Replace <code>s[4]</code> with the next letter, and <code>s</code> becomes <code>&quot;zaazaz&quot;</code>.</li>\n\t<li>Replace <code>s[3]</code> with the next letter, and <code>s</code> becomes <code>&quot;zaaaaz&quot;</code>.</li>\n</ul>\n\n<p>The entire string forms a palindrome of length 6.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= k &lt;= 200</code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int longestPalindromicSubsequence(string s, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int longestPalindromicSubsequence(String s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def longestPalindromicSubsequence(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def longestPalindromicSubsequence(self, s: str, k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int longestPalindromicSubsequence(char* s, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LongestPalindromicSubsequence(string s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar longestPalindromicSubsequence = function(s, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function longestPalindromicSubsequence(s: string, k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function longestPalindromicSubsequence($s, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func longestPalindromicSubsequence(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun longestPalindromicSubsequence(s: String, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int longestPalindromicSubsequence(String s, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func longestPalindromicSubsequence(s string, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef longest_palindromic_subsequence(s, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def longestPalindromicSubsequence(s: String, k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn longest_palindromic_subsequence(s: String, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (longest-palindromic-subsequence s k)\n  (-> string? exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec longest_palindromic_subsequence(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nlongest_palindromic_subsequence(S, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec longest_palindromic_subsequence(s :: String.t, k :: integer) :: integer\n  def longest_palindromic_subsequence(s, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"abced\"\n2"
  },
  {
    "questionId": "3785",
    "questionFrontendId": "3468",
    "title": "Find the Number of Copy Arrays",
    "titleSlug": "find-the-number-of-copy-arrays",
    "content": "<p>You are given an array <code>original</code> of length <code>n</code> and a 2D array <code>bounds</code> of length <code>n x 2</code>, where <code>bounds[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>.</p>\n\n<p>You need to find the number of <strong>possible</strong> arrays <code>copy</code> of length <code>n</code> such that:</p>\n\n<ol>\n\t<li><code>(copy[i] - copy[i - 1]) == (original[i] - original[i - 1])</code> for <code>1 &lt;= i &lt;= n - 1</code>.</li>\n\t<li><code>u<sub>i</sub> &lt;= copy[i] &lt;= v<sub>i</sub></code> for <code>0 &lt;= i &lt;= n - 1</code>.</li>\n</ol>\n\n<p>Return the number of such arrays.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">original = [1,2,3,4], bounds = [[1,2],[2,3],[3,4],[4,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The possible arrays are:</p>\n\n<ul>\n\t<li><code>[1, 2, 3, 4]</code></li>\n\t<li><code>[2, 3, 4, 5]</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">original = [1,2,3,4], bounds = [[1,10],[2,9],[3,8],[4,7]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The possible arrays are:</p>\n\n<ul>\n\t<li><code>[1, 2, 3, 4]</code></li>\n\t<li><code>[2, 3, 4, 5]</code></li>\n\t<li><code>[3, 4, 5, 6]</code></li>\n\t<li><code>[4, 5, 6, 7]</code></li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">original = [1,2,1,2], bounds = [[1,1],[2,3],[3,3],[2,3]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No array is possible.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == original.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= original[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>bounds.length == n</code></li>\n\t<li><code>bounds[i].length == 2</code></li>\n\t<li><code>1 &lt;= bounds[i][0] &lt;= bounds[i][1] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int countArrays(vector<int>& original, vector<vector<int>>& bounds) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int countArrays(int[] original, int[][] bounds) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def countArrays(self, original, bounds):\n        \"\"\"\n        :type original: List[int]\n        :type bounds: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def countArrays(self, original: List[int], bounds: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int countArrays(int* original, int originalSize, int** bounds, int boundsSize, int* boundsColSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int CountArrays(int[] original, int[][] bounds) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} original\n * @param {number[][]} bounds\n * @return {number}\n */\nvar countArrays = function(original, bounds) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function countArrays(original: number[], bounds: number[][]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $original\n     * @param Integer[][] $bounds\n     * @return Integer\n     */\n    function countArrays($original, $bounds) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func countArrays(_ original: [Int], _ bounds: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun countArrays(original: IntArray, bounds: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int countArrays(List<int> original, List<List<int>> bounds) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func countArrays(original []int, bounds [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} original\n# @param {Integer[][]} bounds\n# @return {Integer}\ndef count_arrays(original, bounds)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def countArrays(original: Array[Int], bounds: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn count_arrays(original: Vec<i32>, bounds: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (count-arrays original bounds)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec count_arrays(Original :: [integer()], Bounds :: [[integer()]]) -> integer().\ncount_arrays(Original, Bounds) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec count_arrays(original :: [integer], bounds :: [[integer]]) :: integer\n  def count_arrays(original, bounds) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,3,4]\n[[1,2],[2,3],[3,4],[4,5]]"
  },
  {
    "questionId": "3783",
    "questionFrontendId": "3470",
    "title": "Permutations IV",
    "titleSlug": "permutations-iv",
    "content": "<p>Given two integers, <code>n</code> and <code>k</code>, an <strong>alternating permutation</strong> is a permutation of the first <code>n</code> positive integers such that no <strong>two</strong> adjacent elements are both odd or both even.</p>\n\n<p>Return the <strong>k-th</strong> <strong>alternating permutation</strong> sorted in <em>lexicographical order</em>. If there are fewer than <code>k</code> valid <strong>alternating permutations</strong>, return an empty list.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,4,1,2]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The lexicographically-sorted alternating permutations of <code>[1, 2, 3, 4]</code> are:</p>\n\n<ol>\n\t<li><code>[1, 2, 3, 4]</code></li>\n\t<li><code>[1, 4, 3, 2]</code></li>\n\t<li><code>[2, 1, 4, 3]</code></li>\n\t<li><code>[2, 3, 4, 1]</code></li>\n\t<li><code>[3, 2, 1, 4]</code></li>\n\t<li><code>[3, 4, 1, 2]</code> &larr; 6th permutation</li>\n\t<li><code>[4, 1, 2, 3]</code></li>\n\t<li><code>[4, 3, 2, 1]</code></li>\n</ol>\n\n<p>Since <code>k = 6</code>, we return <code>[3, 4, 1, 2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The lexicographically-sorted alternating permutations of <code>[1, 2, 3]</code> are:</p>\n\n<ol>\n\t<li><code>[1, 2, 3]</code></li>\n\t<li><code>[3, 2, 1]</code> &larr; 2nd permutation</li>\n</ol>\n\n<p>Since <code>k = 2</code>, we return <code>[3, 2, 1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 2, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The lexicographically-sorted alternating permutations of <code>[1, 2]</code> are:</p>\n\n<ol>\n\t<li><code>[1, 2]</code></li>\n\t<li><code>[2, 1]</code></li>\n</ol>\n\n<p>There are only 2 alternating permutations, but <code>k = 3</code>, which is out of range. Thus, we return an empty list <code>[]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> permute(int n, long long k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] permute(int n, long k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def permute(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def permute(self, n: int, k: int) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* permute(int n, long long k, int* returnSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] Permute(int n, long k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[]}\n */\nvar permute = function(n, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function permute(n: number, k: number): number[] {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function permute($n, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func permute(_ n: Int, _ k: Int) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun permute(n: Int, k: Long): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> permute(int n, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func permute(n int, k int64) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[]}\ndef permute(n, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def permute(n: Int, k: Long): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn permute(n: i32, k: i64) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (permute n k)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec permute(N :: integer(), K :: integer()) -> [integer()].\npermute(N, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec permute(n :: integer, k :: integer) :: [integer]\n  def permute(n, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "4\n6"
  },
  {
    "questionId": "3782",
    "questionFrontendId": "3436",
    "title": "Find Valid Emails",
    "titleSlug": "find-valid-emails",
    "content": "<p>Table: <code>Users</code></p>\n\n<pre>\n+-----------------+---------+\n| Column Name     | Type    |\n+-----------------+---------+\n| user_id         | int     |\n| email           | varchar |\n+-----------------+---------+\n(user_id) is the unique key for this table.\nEach row contains a user&#39;s unique ID and email address.\n</pre>\n\n<p>Write a solution to find all the <strong>valid email addresses</strong>. A valid email address meets the following criteria:</p>\n\n<ul>\n\t<li>It contains exactly one <code>@</code> symbol.</li>\n\t<li>It ends with <code>.com</code>.</li>\n\t<li>The part before the <code>@</code> symbol contains only <strong>alphanumeric</strong> characters and <strong>underscores</strong>.</li>\n\t<li>The part after the <code>@</code> symbol and before <code>.com</code> contains a domain name <strong>that contains only letters</strong>.</li>\n</ul>\n\n<p>Return<em> the result table ordered by</em> <code>user_id</code> <em>in</em> <strong>ascending </strong><em>order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>Users table:</p>\n\n<pre class=\"example-io\">\n+---------+---------------------+\n| user_id | email               |\n+---------+---------------------+\n| 1       | alice@example.com   |\n| 2       | bob_at_example.com  |\n| 3       | charlie@example.net |\n| 4       | david@domain.com    |\n| 5       | eve@invalid         |\n+---------+---------------------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+---------+-------------------+\n| user_id | email             |\n+---------+-------------------+\n| 1       | alice@example.com |\n| 4       | david@domain.com  |\n+---------+-------------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li><strong>alice@example.com</strong> is valid because it contains one <code>@</code>, alice&nbsp;is alphanumeric, and example.com&nbsp;starts with a letter and ends with .com.</li>\n\t<li><strong>bob_at_example.com</strong> is invalid because it contains an underscore instead of an <code>@</code>.</li>\n\t<li><strong>charlie@example.net</strong> is invalid because the domain does not end with <code>.com</code>.</li>\n\t<li><strong>david@domain.com</strong> is valid because it meets all criteria.</li>\n\t<li><strong>eve@invalid</strong> is invalid because the domain does not end with <code>.com</code>.</li>\n</ul>\n\n<p>Result table is ordered by user_id in ascending order.</p>\n</div>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef find_valid_emails(users: pd.DataFrame) -> pd.DataFrame:\n    "
      },
      {
        "lang": "PostgreSQL",
        "langSlug": "postgresql",
        "code": "-- Write your PostgreSQL query statement below\n"
      }
    ],
    "sampleTestCase": "{\"headers\":{\"Users\":[\"user_id\",\"email\"]},\"rows\":{\"Users\":[[1,\"alice@example.com\"],[2,\"bob_at_example.com\"],[3,\"charlie@example.net\"],[4,\"david@domain.com\"],[5,\"eve@invalid\"]]}}"
  },
  {
    "questionId": "3781",
    "questionFrontendId": "3464",
    "title": "Maximize the Distance Between Points on a Square",
    "titleSlug": "maximize-the-distance-between-points-on-a-square",
    "content": "<p>You are given an integer <code><font face=\"monospace\">side</font></code>, representing the edge length of a square with corners at <code>(0, 0)</code>, <code>(0, side)</code>, <code>(side, 0)</code>, and <code>(side, side)</code> on a Cartesian plane.</p>\n\n<p>You are also given a <strong>positive</strong> integer <code>k</code> and a 2D integer array <code>points</code>, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the coordinate of a point lying on the <strong>boundary</strong> of the square.</p>\n\n<p>You need to select <code>k</code> elements among <code>points</code> such that the <strong>minimum</strong> Manhattan distance between any two points is <strong>maximized</strong>.</p>\n\n<p>Return the <strong>maximum</strong> possible <strong>minimum</strong> Manhattan distance between the selected <code>k</code> points.</p>\n\n<p>The Manhattan Distance between two cells <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and <code>(x<sub>j</sub>, y<sub>j</sub>)</code> is <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">side = 2, points = [[0,2],[2,0],[2,2],[0,0]], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/28/4080_example0_revised.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<p>Select all four points.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">side = 2, points = [[0,0],[1,2],[2,0],[2,2],[2,1]], k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/28/4080_example1_revised.png\" style=\"width: 211px; height: 200px;\" /></p>\n\n<p>Select the points <code>(0, 0)</code>, <code>(2, 0)</code>, <code>(2, 2)</code>, and <code>(2, 1)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">side = 2, points = [[0,0],[0,1],[0,2],[1,2],[2,0],[2,2],[2,1]], k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/28/4080_example2_revised.png\" style=\"width: 200px; height: 200px;\" /></p>\n\n<p>Select the points <code>(0, 0)</code>, <code>(0, 1)</code>, <code>(0, 2)</code>, <code>(1, 2)</code>, and <code>(2, 2)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= side &lt;= 10<sup>9</sup></code></li>\n\t<li><code>4 &lt;= points.length &lt;= min(4 * side, 15 * 10<sup>3</sup>)</code></li>\n\t<li><code>points[i] == [xi, yi]</code></li>\n\t<li>The input is generated such that:\n\t<ul>\n\t\t<li><code>points[i]</code> lies on the boundary of the square.</li>\n\t\t<li>All <code>points[i]</code> are <strong>unique</strong>.</li>\n\t</ul>\n\t</li>\n\t<li><code>4 &lt;= k &lt;= min(25, points.length)</code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxDistance(int side, vector<vector<int>>& points, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxDistance(int side, int[][] points, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxDistance(self, side, points, k):\n        \"\"\"\n        :type side: int\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxDistance(self, side: int, points: List[List[int]], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxDistance(int side, int** points, int pointsSize, int* pointsColSize, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxDistance(int side, int[][] points, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} side\n * @param {number[][]} points\n * @param {number} k\n * @return {number}\n */\nvar maxDistance = function(side, points, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxDistance(side: number, points: number[][], k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $side\n     * @param Integer[][] $points\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxDistance($side, $points, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxDistance(_ side: Int, _ points: [[Int]], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxDistance(side: Int, points: Array<IntArray>, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxDistance(int side, List<List<int>> points, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxDistance(side int, points [][]int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} side\n# @param {Integer[][]} points\n# @param {Integer} k\n# @return {Integer}\ndef max_distance(side, points, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxDistance(side: Int, points: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_distance(side: i32, points: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-distance side points k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_distance(Side :: integer(), Points :: [[integer()]], K :: integer()) -> integer().\nmax_distance(Side, Points, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_distance(side :: integer, points :: [[integer]], k :: integer) :: integer\n  def max_distance(side, points, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "2\n[[0,2],[2,0],[2,2],[0,0]]\n4"
  },
  {
    "questionId": "3780",
    "questionFrontendId": "3437",
    "title": "Permutations III",
    "titleSlug": "permutations-iii",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Backtracking",
        "slug": "backtracking"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "4"
  },
  {
    "questionId": "3779",
    "questionFrontendId": "3457",
    "title": "Eat Pizzas!",
    "titleSlug": "eat-pizzas",
    "content": "<p>You are given an integer array <code>pizzas</code> of size <code>n</code>, where <code>pizzas[i]</code> represents the weight of the <code>i<sup>th</sup></code> pizza. Every day, you eat <strong>exactly</strong> 4 pizzas. Due to your incredible metabolism, when you eat pizzas of weights <code>W</code>, <code>X</code>, <code>Y</code>, and <code>Z</code>, where <code>W &lt;= X &lt;= Y &lt;= Z</code>, you gain the weight of only 1 pizza!</p>\n\n<ul>\n\t<li>On <strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">odd-numbered</span></strong> days <strong>(1-indexed)</strong>, you gain a weight of <code>Z</code>.</li>\n\t<li>On <strong>even-numbered</strong> days, you gain a weight of <code>Y</code>.</li>\n</ul>\n\n<p>Find the <strong>maximum</strong> total weight you can gain by eating <strong>all</strong> pizzas optimally.</p>\n\n<p><strong>Note</strong>: It is guaranteed that <code>n</code> is a multiple of 4, and each pizza can be eaten only once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pizzas = [1,2,3,4,5,6,7,8]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">14</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>On day 1, you eat pizzas at indices <code>[1, 2, 4, 7] = [2, 3, 5, 8]</code>. You gain a weight of 8.</li>\n\t<li>On day 2, you eat pizzas at indices <code>[0, 3, 5, 6] = [1, 4, 6, 7]</code>. You gain a weight of 6.</li>\n</ul>\n\n<p>The total weight gained after eating all the pizzas is <code>8 + 6 = 14</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">pizzas = [2,1,1,1,1,1,1,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>On day 1, you eat pizzas at indices <code>[4, 5, 6, 0] = [1, 1, 1, 2]</code>. You gain a weight of 2.</li>\n\t<li>On day 2, you eat pizzas at indices <code>[1, 2, 3, 7] = [1, 1, 1, 1]</code>. You gain a weight of 1.</li>\n</ul>\n\n<p>The total weight gained after eating all the pizzas is <code>2 + 1 = 3.</code></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= n == pizzas.length &lt;= 2 * 10<sup><span style=\"font-size: 10.8333px;\">5</span></sup></code></li>\n\t<li><code>1 &lt;= pizzas[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n</code> is a multiple of 4.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    long long maxWeight(vector<int>& pizzas) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public long maxWeight(int[] pizzas) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxWeight(self, pizzas):\n        \"\"\"\n        :type pizzas: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxWeight(self, pizzas: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "long long maxWeight(int* pizzas, int pizzasSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public long MaxWeight(int[] pizzas) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} pizzas\n * @return {number}\n */\nvar maxWeight = function(pizzas) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxWeight(pizzas: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $pizzas\n     * @return Integer\n     */\n    function maxWeight($pizzas) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxWeight(_ pizzas: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxWeight(pizzas: IntArray): Long {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxWeight(List<int> pizzas) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxWeight(pizzas []int) int64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} pizzas\n# @return {Integer}\ndef max_weight(pizzas)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxWeight(pizzas: Array[Int]): Long = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_weight(pizzas: Vec<i32>) -> i64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-weight pizzas)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_weight(Pizzas :: [integer()]) -> integer().\nmax_weight(Pizzas) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_weight(pizzas :: [integer]) :: integer\n  def max_weight(pizzas) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,3,4,5,6,7,8]"
  },
  {
    "questionId": "3778",
    "questionFrontendId": "3467",
    "title": "Transform Array by Parity",
    "titleSlug": "transform-array-by-parity",
    "content": "<p>You are given an integer array <code>nums</code>. Transform <code>nums</code> by performing the following operations in the <strong>exact</strong> order specified:</p>\n\n<ol>\n\t<li>Replace each even number with 0.</li>\n\t<li>Replace each odd numbers with 1.</li>\n\t<li>Sort the modified array in <strong>non-decreasing</strong> order.</li>\n</ol>\n\n<p>Return the resulting array after performing these operations.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,0,1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Replace the even numbers (4 and 2) with 0 and the odd numbers (3 and 1) with 1. Now, <code>nums = [0, 1, 0, 1]</code>.</li>\n\t<li>After sorting <code>nums</code> in non-descending order, <code>nums = [0, 0, 1, 1]</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,5,1,4,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,0,1,1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Replace the even numbers (4 and 2) with 0 and the odd numbers (1, 5 and 1) with 1. Now, <code>nums = [1, 1, 1, 0, 0]</code>.</li>\n\t<li>After sorting <code>nums</code> in non-descending order, <code>nums = [0, 0, 1, 1, 1]</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> transformArray(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] transformArray(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def transformArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def transformArray(self, nums: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* transformArray(int* nums, int numsSize, int* returnSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] TransformArray(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar transformArray = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function transformArray(nums: number[]): number[] {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function transformArray($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func transformArray(_ nums: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun transformArray(nums: IntArray): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> transformArray(List<int> nums) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func transformArray(nums []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef transform_array(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def transformArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn transform_array(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (transform-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec transform_array(Nums :: [integer()]) -> [integer()].\ntransform_array(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec transform_array(nums :: [integer]) :: [integer]\n  def transform_array(nums) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[4,3,2,1]"
  },
  {
    "questionId": "3776",
    "questionFrontendId": "3469",
    "title": "Find Minimum Cost to Remove Array Elements",
    "titleSlug": "find-minimum-cost-to-remove-array-elements",
    "content": "<p>You are given an integer array <code>nums</code>. Your task is to remove <strong>all elements</strong> from the array by performing one of the following operations at each step until <code>nums</code> is empty:</p>\n\n<ul>\n\t<li>Choose any two elements from the first three elements of <code>nums</code> and remove them. The cost of this operation is the <strong>maximum</strong> of the two elements removed.</li>\n\t<li>If fewer than three elements remain in <code>nums</code>, remove all the remaining elements in a single operation. The cost of this operation is the <strong>maximum</strong> of the remaining elements.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> cost required to remove all the elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [6,2,8,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>nums = [6, 2, 8, 4]</code>.</p>\n\n<ul>\n\t<li>In the first operation, remove <code>nums[0] = 6</code> and <code>nums[2] = 8</code> with a cost of <code>max(6, 8) = 8</code>. Now, <code>nums = [2, 4]</code>.</li>\n\t<li>In the second operation, remove the remaining elements with a cost of <code>max(2, 4) = 4</code>.</li>\n</ul>\n\n<p>The cost to remove all elements is <code>8 + 4 = 12</code>. This is the minimum cost to remove all elements in <code>nums</code>. Hence, the output is 12.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>nums = [2, 1, 3, 3]</code>.</p>\n\n<ul>\n\t<li>In the first operation, remove <code>nums[0] = 2</code> and <code>nums[1] = 1</code> with a cost of <code>max(2, 1) = 2</code>. Now, <code>nums = [3, 3]</code>.</li>\n\t<li>In the second operation remove the remaining elements with a cost of <code>max(3, 3) = 3</code>.</li>\n</ul>\n\n<p>The cost to remove all elements is <code>2 + 3 = 5</code>. This is the minimum cost to remove all elements in <code>nums</code>. Hence, the output is 5.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int minCost(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int minCost(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minCost(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int minCost(int* nums, int numsSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MinCost(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minCost = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minCost(nums: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minCost($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minCost(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minCost(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minCost(List<int> nums) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minCost(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_cost(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minCost(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_cost(Nums :: [integer()]) -> integer().\nmin_cost(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_cost(nums :: [integer]) :: integer\n  def min_cost(nums) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[6,2,8,4]"
  },
  {
    "questionId": "3775",
    "questionFrontendId": "3454",
    "title": "Separate Squares II",
    "titleSlug": "separate-squares-ii",
    "content": "<p>You are given a 2D integer array <code>squares</code>. Each <code>squares[i] = [x<sub>i</sub>, y<sub>i</sub>, l<sub>i</sub>]</code> represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.</p>\n\n<p>Find the <strong>minimum</strong> y-coordinate value of a horizontal line such that the total area covered by squares above the line <em>equals</em> the total area covered by squares below the line.</p>\n\n<p>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p><strong>Note</strong>: Squares <strong>may</strong> overlap. Overlapping areas should be counted <strong>only once</strong> in this version.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">squares = [[0,0,1],[2,2,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1.00000</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/15/4065example1drawio.png\" style=\"width: 269px; height: 203px;\" /></p>\n\n<p>Any horizontal line between <code>y = 1</code> and <code>y = 2</code> results in an equal split, with 1 square unit above and 1 square unit below. The minimum y-value is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">squares = [[0,0,2],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1.00000</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/15/4065example2drawio.png\" style=\"width: 269px; height: 203px;\" /></p>\n\n<p>Since the blue square overlaps with the red square, it will not be counted again. Thus, the line <code>y = 1</code> splits the squares into two equal parts.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= squares.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>squares[i] = [x<sub>i</sub>, y<sub>i</sub>, l<sub>i</sub>]</code></li>\n\t<li><code>squares[i].length == 3</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= l<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li>The total area of all the squares will not exceed <code>10<sup>15</sup></code>.</li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Segment Tree",
        "slug": "segment-tree"
      },
      {
        "name": "Line Sweep",
        "slug": "line-sweep"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double separateSquares(vector<vector<int>>& squares) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double separateSquares(int[][] squares) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def separateSquares(self, squares):\n        \"\"\"\n        :type squares: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def separateSquares(self, squares: List[List[int]]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double separateSquares(int** squares, int squaresSize, int* squaresColSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double SeparateSquares(int[][] squares) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} squares\n * @return {number}\n */\nvar separateSquares = function(squares) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function separateSquares(squares: number[][]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $squares\n     * @return Float\n     */\n    function separateSquares($squares) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func separateSquares(_ squares: [[Int]]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun separateSquares(squares: Array<IntArray>): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double separateSquares(List<List<int>> squares) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func separateSquares(squares [][]int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} squares\n# @return {Float}\ndef separate_squares(squares)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def separateSquares(squares: Array[Array[Int]]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn separate_squares(squares: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (separate-squares squares)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec separate_squares(Squares :: [[integer()]]) -> float().\nseparate_squares(Squares) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec separate_squares(squares :: [[integer]]) :: float\n  def separate_squares(squares) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[[0,0,1],[2,2,1]]"
  },
  {
    "questionId": "3774",
    "questionFrontendId": "3463",
    "title": "Check If Digits Are Equal in String After Operations II",
    "titleSlug": "check-if-digits-are-equal-in-string-after-operations-ii",
    "content": "<p>You are given a string <code>s</code> consisting of digits. Perform the following operation repeatedly until the string has <strong>exactly</strong> two digits:</p>\n\n<ul>\n\t<li>For each pair of consecutive digits in <code>s</code>, starting from the first digit, calculate a new digit as the sum of the two digits <strong>modulo</strong> 10.</li>\n\t<li>Replace <code>s</code> with the sequence of newly calculated digits, <em>maintaining the order</em> in which they are computed.</li>\n</ul>\n\n<p>Return <code>true</code> if the final two digits in <code>s</code> are the <strong>same</strong>; otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;3902&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially, <code>s = &quot;3902&quot;</code></li>\n\t<li>First operation:\n\t<ul>\n\t\t<li><code>(s[0] + s[1]) % 10 = (3 + 9) % 10 = 2</code></li>\n\t\t<li><code>(s[1] + s[2]) % 10 = (9 + 0) % 10 = 9</code></li>\n\t\t<li><code>(s[2] + s[3]) % 10 = (0 + 2) % 10 = 2</code></li>\n\t\t<li><code>s</code> becomes <code>&quot;292&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Second operation:\n\t<ul>\n\t\t<li><code>(s[0] + s[1]) % 10 = (2 + 9) % 10 = 1</code></li>\n\t\t<li><code>(s[1] + s[2]) % 10 = (9 + 2) % 10 = 1</code></li>\n\t\t<li><code>s</code> becomes <code>&quot;11&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Since the digits in <code>&quot;11&quot;</code> are the same, the output is <code>true</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;34789&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially, <code>s = &quot;34789&quot;</code>.</li>\n\t<li>After the first operation, <code>s = &quot;7157&quot;</code>.</li>\n\t<li>After the second operation, <code>s = &quot;862&quot;</code>.</li>\n\t<li>After the third operation, <code>s = &quot;48&quot;</code>.</li>\n\t<li>Since <code>&#39;4&#39; != &#39;8&#39;</code>, the output is <code>false</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of only digits.</li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Combinatorics",
        "slug": "combinatorics"
      },
      {
        "name": "Number Theory",
        "slug": "number-theory"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool hasSameDigits(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean hasSameDigits(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def hasSameDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def hasSameDigits(self, s: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool hasSameDigits(char* s) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool HasSameDigits(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar hasSameDigits = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function hasSameDigits(s: string): boolean {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function hasSameDigits($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func hasSameDigits(_ s: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun hasSameDigits(s: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool hasSameDigits(String s) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func hasSameDigits(s string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Boolean}\ndef has_same_digits(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def hasSameDigits(s: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn has_same_digits(s: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (has-same-digits s)\n  (-> string? boolean?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec has_same_digits(S :: unicode:unicode_binary()) -> boolean().\nhas_same_digits(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec has_same_digits(s :: String.t) :: boolean\n  def has_same_digits(s) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"3902\""
  },
  {
    "questionId": "3771",
    "questionFrontendId": "3458",
    "title": "Select K Disjoint Special Substrings",
    "titleSlug": "select-k-disjoint-special-substrings",
    "content": "<p>Given a string <code>s</code> of length <code>n</code> and an integer <code>k</code>, determine whether it is possible to select <code>k</code> disjoint <strong>special substrings</strong>.</p>\n\n<p>A <strong>special substring</strong> is a <span data-keyword=\"substring-nonempty\">substring</span> where:</p>\n\n<ul>\n\t<li>Any character present inside the substring should not appear outside it in the string.</li>\n\t<li>The substring is not the entire string <code>s</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that all <code>k</code> substrings must be disjoint, meaning they cannot overlap.</p>\n\n<p>Return <code>true</code> if it is possible to select <code>k</code> such disjoint special substrings; otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abcdbaefab&quot;, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>We can select two disjoint special substrings: <code>&quot;cd&quot;</code> and <code>&quot;ef&quot;</code>.</li>\n\t<li><code>&quot;cd&quot;</code> contains the characters <code>&#39;c&#39;</code> and <code>&#39;d&#39;</code>, which do not appear elsewhere in <code>s</code>.</li>\n\t<li><code>&quot;ef&quot;</code> contains the characters <code>&#39;e&#39;</code> and <code>&#39;f&#39;</code>, which do not appear elsewhere in <code>s</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;cdefdc&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There can be at most 2 disjoint special substrings: <code>&quot;e&quot;</code> and <code>&quot;f&quot;</code>. Since <code>k = 3</code>, the output is <code>false</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abeabe&quot;, k = 0</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 26</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool maxSubstringLength(string s, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean maxSubstringLength(String s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSubstringLength(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSubstringLength(self, s: str, k: int) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool maxSubstringLength(char* s, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool MaxSubstringLength(string s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar maxSubstringLength = function(s, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSubstringLength(s: string, k: number): boolean {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Boolean\n     */\n    function maxSubstringLength($s, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSubstringLength(_ s: String, _ k: Int) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSubstringLength(s: String, k: Int): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool maxSubstringLength(String s, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSubstringLength(s string, k int) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {Boolean}\ndef max_substring_length(s, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSubstringLength(s: String, k: Int): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_substring_length(s: String, k: i32) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-substring-length s k)\n  (-> string? exact-integer? boolean?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_substring_length(S :: unicode:unicode_binary(), K :: integer()) -> boolean().\nmax_substring_length(S, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_substring_length(s :: String.t, k :: integer) :: boolean\n  def max_substring_length(s, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"abcdbaefab\"\n2"
  },
  {
    "questionId": "3770",
    "questionFrontendId": "3474",
    "title": "Lexicographically Smallest Generated String",
    "titleSlug": "lexicographically-smallest-generated-string",
    "content": "<p>You are given two strings, <code>str1</code> and <code>str2</code>, of lengths <code>n</code> and <code>m</code>, respectively.</p>\n\n<p>A string <code>word</code> of length <code>n + m - 1</code> is defined to be <strong>generated</strong> by <code>str1</code> and <code>str2</code> if it satisfies the following conditions for <strong>each</strong> index <code>0 &lt;= i &lt;= n - 1</code>:</p>\n\n<ul>\n\t<li>If <code>str1[i] == &#39;T&#39;</code>, the <strong><span data-keyword=\"substring-nonempty\">substring</span></strong> of <code>word</code> with size <code>m</code> starting at index <code>i</code> is <strong>equal</strong> to <code>str2</code>, i.e., <code>word[i..(i + m - 1)] == str2</code>.</li>\n\t<li>If <code>str1[i] == &#39;F&#39;</code>, the <strong><span data-keyword=\"substring-nonempty\">substring</span></strong> of <code>word</code> with size <code>m</code> starting at index <code>i</code> is <strong>not equal</strong> to <code>str2</code>, i.e., <code>word[i..(i + m - 1)] != str2</code>.</li>\n</ul>\n\n<p>Return the <strong><span data-keyword=\"lexicographically-smaller-string\">lexicographically smallest</span></strong> possible string that can be <strong>generated</strong> by <code>str1</code> and <code>str2</code>. If no string can be generated, return an empty string <code>&quot;&quot;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">str1 = &quot;TFTF&quot;, str2 = &quot;ab&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;ababa&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<h4>The table below represents the string <code>&quot;ababa&quot;</code></h4>\n\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">Index</th>\n\t\t\t<th style=\"border: 1px solid black;\">T/F</th>\n\t\t\t<th style=\"border: 1px solid black;\">Substring of length <code>m</code></th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>&#39;T&#39;</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">&quot;ab&quot;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>&#39;F&#39;</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">&quot;ba&quot;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>&#39;T&#39;</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">&quot;ab&quot;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>&#39;F&#39;</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">&quot;ba&quot;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The strings <code>&quot;ababa&quot;</code> and <code>&quot;ababb&quot;</code> can be generated by <code>str1</code> and <code>str2</code>.</p>\n\n<p>Return <code>&quot;ababa&quot;</code> since it is the lexicographically smaller string.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">str1 = &quot;TFTF&quot;, str2 = &quot;abc&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>No string that satisfies the conditions can be generated.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">str1 = &quot;F&quot;, str2 = &quot;d&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;a&quot;</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == str1.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m == str2.length &lt;= 500</code></li>\n\t<li><code>str1</code> consists only of <code>&#39;T&#39;</code> or <code>&#39;F&#39;</code>.</li>\n\t<li><code>str2</code> consists only of lowercase English characters.</li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string generateString(string str1, string str2) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String generateString(String str1, String str2) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def generateString(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def generateString(self, str1: str, str2: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char* generateString(char* str1, char* str2) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string GenerateString(string str1, string str2) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar generateString = function(str1, str2) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function generateString(str1: string, str2: string): string {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $str1\n     * @param String $str2\n     * @return String\n     */\n    function generateString($str1, $str2) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func generateString(_ str1: String, _ str2: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun generateString(str1: String, str2: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String generateString(String str1, String str2) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func generateString(str1 string, str2 string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} str1\n# @param {String} str2\n# @return {String}\ndef generate_string(str1, str2)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def generateString(str1: String, str2: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn generate_string(str1: String, str2: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (generate-string str1 str2)\n  (-> string? string? string?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec generate_string(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\ngenerate_string(Str1, Str2) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec generate_string(str1 :: String.t, str2 :: String.t) :: String.t\n  def generate_string(str1, str2) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"TFTF\"\n\"ab\""
  },
  {
    "questionId": "3768",
    "questionFrontendId": "3461",
    "title": "Check If Digits Are Equal in String After Operations I",
    "titleSlug": "check-if-digits-are-equal-in-string-after-operations-i",
    "content": "<p>You are given a string <code>s</code> consisting of digits. Perform the following operation repeatedly until the string has <strong>exactly</strong> two digits:</p>\n\n<ul>\n\t<li>For each pair of consecutive digits in <code>s</code>, starting from the first digit, calculate a new digit as the sum of the two digits <strong>modulo</strong> 10.</li>\n\t<li>Replace <code>s</code> with the sequence of newly calculated digits, <em>maintaining the order</em> in which they are computed.</li>\n</ul>\n\n<p>Return <code>true</code> if the final two digits in <code>s</code> are the <strong>same</strong>; otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;3902&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially, <code>s = &quot;3902&quot;</code></li>\n\t<li>First operation:\n\t<ul>\n\t\t<li><code>(s[0] + s[1]) % 10 = (3 + 9) % 10 = 2</code></li>\n\t\t<li><code>(s[1] + s[2]) % 10 = (9 + 0) % 10 = 9</code></li>\n\t\t<li><code>(s[2] + s[3]) % 10 = (0 + 2) % 10 = 2</code></li>\n\t\t<li><code>s</code> becomes <code>&quot;292&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Second operation:\n\t<ul>\n\t\t<li><code>(s[0] + s[1]) % 10 = (2 + 9) % 10 = 1</code></li>\n\t\t<li><code>(s[1] + s[2]) % 10 = (9 + 2) % 10 = 1</code></li>\n\t\t<li><code>s</code> becomes <code>&quot;11&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>Since the digits in <code>&quot;11&quot;</code> are the same, the output is <code>true</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;34789&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Initially, <code>s = &quot;34789&quot;</code>.</li>\n\t<li>After the first operation, <code>s = &quot;7157&quot;</code>.</li>\n\t<li>After the second operation, <code>s = &quot;862&quot;</code>.</li>\n\t<li>After the third operation, <code>s = &quot;48&quot;</code>.</li>\n\t<li>Since <code>&#39;4&#39; != &#39;8&#39;</code>, the output is <code>false</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of only digits.</li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Simulation",
        "slug": "simulation"
      },
      {
        "name": "Combinatorics",
        "slug": "combinatorics"
      },
      {
        "name": "Number Theory",
        "slug": "number-theory"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    bool hasSameDigits(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public boolean hasSameDigits(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def hasSameDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def hasSameDigits(self, s: str) -> bool:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "bool hasSameDigits(char* s) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public bool HasSameDigits(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar hasSameDigits = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function hasSameDigits(s: string): boolean {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function hasSameDigits($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func hasSameDigits(_ s: String) -> Bool {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun hasSameDigits(s: String): Boolean {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  bool hasSameDigits(String s) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func hasSameDigits(s string) bool {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Boolean}\ndef has_same_digits(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def hasSameDigits(s: String): Boolean = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn has_same_digits(s: String) -> bool {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (has-same-digits s)\n  (-> string? boolean?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec has_same_digits(S :: unicode:unicode_binary()) -> boolean().\nhas_same_digits(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec has_same_digits(s :: String.t) :: boolean\n  def has_same_digits(s) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"3902\""
  },
  {
    "questionId": "3767",
    "questionFrontendId": "3421",
    "title": "Find Students Who Improved",
    "titleSlug": "find-students-who-improved",
    "content": "<p>Table: <code>Scores</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| student_id  | int     |\n| subject     | varchar |\n| score       | int     |\n| exam_date   | varchar |\n+-------------+---------+\n(student_id, subject, exam_date) is the primary key for this table.\nEach row contains information about a student&#39;s score in a specific subject on a particular exam date. score is between 0 and 100 (inclusive).\n</pre>\n\n<p>Write a solution to find the <strong>students who have shown improvement</strong>. A student is considered to have shown improvement if they meet <strong>both</strong> of these conditions:</p>\n\n<ul>\n\t<li>Have taken exams in the <strong>same subject</strong> on at least two different dates</li>\n\t<li>Their <strong>latest score</strong> in that subject is <strong>higher</strong> than their <strong>first score</strong></li>\n</ul>\n\n<p>Return <em>the result table</em>&nbsp;<em>ordered by</em> <code>student_id,</code> <code>subject</code> <em>in <strong>ascending</strong> order</em>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong></p>\n\n<p>Scores table:</p>\n\n<pre class=\"example-io\">\n+------------+----------+-------+------------+\n| student_id | subject  | score | exam_date  |\n+------------+----------+-------+------------+\n| 101        | Math     | 70    | 2023-01-15 |\n| 101        | Math     | 85    | 2023-02-15 |\n| 101        | Physics  | 65    | 2023-01-15 |\n| 101        | Physics  | 60    | 2023-02-15 |\n| 102        | Math     | 80    | 2023-01-15 |\n| 102        | Math     | 85    | 2023-02-15 |\n| 103        | Math     | 90    | 2023-01-15 |\n| 104        | Physics  | 75    | 2023-01-15 |\n| 104        | Physics  | 85    | 2023-02-15 |\n+------------+----------+-------+------------+\n</pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"example-io\">\n+------------+----------+-------------+--------------+\n| student_id | subject  | first_score | latest_score |\n+------------+----------+-------------+--------------+\n| 101        | Math     | 70          | 85           |\n| 102        | Math     | 80          | 85           |\n| 104        | Physics  | 75          | 85           |\n+------------+----------+-------------+--------------+\n</pre>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>Student 101 in Math: Improved from 70 to 85</li>\n\t<li>Student 101 in Physics: No improvement (dropped from 65 to 60)</li>\n\t<li>Student 102 in Math: Improved from 80 to 85</li>\n\t<li>Student 103 in Math: Only one exam, not eligible</li>\n\t<li>Student 104 in Physics: Improved from 75 to 85</li>\n</ul>\n\n<p>Result table is ordered by student_id, subject.</p>\n</div>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": [
      {
        "lang": "MySQL",
        "langSlug": "mysql",
        "code": "# Write your MySQL query statement below\n"
      },
      {
        "lang": "MS SQL Server",
        "langSlug": "mssql",
        "code": "/* Write your T-SQL query statement below */\n"
      },
      {
        "lang": "Oracle",
        "langSlug": "oraclesql",
        "code": "/* Write your PL/SQL query statement below */\n"
      },
      {
        "lang": "Pandas",
        "langSlug": "pythondata",
        "code": "import pandas as pd\n\ndef find_students_who_improved(scores: pd.DataFrame) -> pd.DataFrame:\n    "
      },
      {
        "lang": "PostgreSQL",
        "langSlug": "postgresql",
        "code": "-- Write your PostgreSQL query statement below\n"
      }
    ],
    "sampleTestCase": "{\"headers\":{\"Scores\":[\"student_id\",\"subject\",\"score\",\"exam_date\"]},\"rows\":{\"Scores\":[[101,\"Math\",70,\"2023-01-15\"],[101,\"Math\",85,\"2023-02-15\"],[101,\"Physics\",65,\"2023-01-15\"],[101,\"Physics\",60,\"2023-02-15\"],[102,\"Math\",80,\"2023-01-15\"],[102,\"Math\",85,\"2023-02-15\"],[103,\"Math\",90,\"2023-01-15\"],[104,\"Physics\",75,\"2023-01-15\"],[104,\"Physics\",85,\"2023-02-15\"]]}}"
  },
  {
    "questionId": "3764",
    "questionFrontendId": "3462",
    "title": "Maximum Sum With at Most K Elements",
    "titleSlug": "maximum-sum-with-at-most-k-elements",
    "content": "<p data-pm-slice=\"1 3 []\">You are given a 2D integer matrix <code>grid</code> of size <code>n x m</code>, an integer array <code>limits</code> of length <code>n</code>, and an integer <code>k</code>. The task is to find the <strong>maximum sum</strong> of <strong>at most</strong> <code>k</code> elements from the matrix <code>grid</code> such that:</p>\n\n<ul data-spread=\"false\">\n\t<li>\n\t<p>The number of elements taken from the <code>i<sup>th</sup></code> row of <code>grid</code> does not exceed <code>limits[i]</code>.</p>\n\t</li>\n</ul>\n\n<p data-pm-slice=\"1 1 []\">Return the <strong>maximum sum</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,2],[3,4]], limits = [1,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>From the second row, we can take at most 2 elements. The elements taken are 4 and 3.</li>\n\t<li>The maximum possible sum of at most 2 selected elements is <code>4 + 3 = 7</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[5,3,7],[8,2,6]], limits = [2,2], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">21</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>From the first row, we can take at most 2 elements. The element taken is 7.</li>\n\t<li>From the second row, we can take at most 2 elements. The elements taken are 8 and 6.</li>\n\t<li>The maximum possible sum of at most 3 selected elements is <code>7 + 8 + 6 = 21</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == limits.length</code></li>\n\t<li><code>m == grid[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= limits[i] &lt;= m</code></li>\n\t<li><code>0 &lt;= k &lt;= min(n * m, sum(limits))</code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Heap (Priority Queue)",
        "slug": "heap-priority-queue"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    long long maxSum(vector<vector<int>>& grid, vector<int>& limits, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public long maxSum(int[][] grid, int[] limits, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSum(self, grid, limits, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type limits: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSum(self, grid: List[List[int]], limits: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "long long maxSum(int** grid, int gridSize, int* gridColSize, int* limits, int limitsSize, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public long MaxSum(int[][] grid, int[] limits, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} grid\n * @param {number[]} limits\n * @param {number} k\n * @return {number}\n */\nvar maxSum = function(grid, limits, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSum(grid: number[][], limits: number[], k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer[] $limits\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSum($grid, $limits, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSum(_ grid: [[Int]], _ limits: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSum(grid: Array<IntArray>, limits: IntArray, k: Int): Long {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxSum(List<List<int>> grid, List<int> limits, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSum(grid [][]int, limits []int, k int) int64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} grid\n# @param {Integer[]} limits\n# @param {Integer} k\n# @return {Integer}\ndef max_sum(grid, limits, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSum(grid: Array[Array[Int]], limits: Array[Int], k: Int): Long = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sum(grid: Vec<Vec<i32>>, limits: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sum grid limits k)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sum(Grid :: [[integer()]], Limits :: [integer()], K :: integer()) -> integer().\nmax_sum(Grid, Limits, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sum(grid :: [[integer]], limits :: [integer], k :: integer) :: integer\n  def max_sum(grid, limits, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[[1,2],[3,4]]\n[1,2]\n2"
  },
  {
    "questionId": "3763",
    "questionFrontendId": "3453",
    "title": "Separate Squares I",
    "titleSlug": "separate-squares-i",
    "content": "<p>You are given a 2D integer array <code>squares</code>. Each <code>squares[i] = [x<sub>i</sub>, y<sub>i</sub>, l<sub>i</sub>]</code> represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.</p>\n\n<p>Find the <strong>minimum</strong> y-coordinate value of a horizontal line such that the total area of the squares above the line <em>equals</em> the total area of the squares below the line.</p>\n\n<p>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p><strong>Note</strong>: Squares <strong>may</strong> overlap. Overlapping areas should be counted <strong>multiple times</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">squares = [[0,0,1],[2,2,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1.00000</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/06/4062example1drawio.png\" style=\"width: 378px; height: 352px;\" /></p>\n\n<p>Any horizontal line between <code>y = 1</code> and <code>y = 2</code> will have 1 square unit above it and 1 square unit below it. The lowest option is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">squares = [[0,0,2],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1.16667</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/15/4062example2drawio.png\" style=\"width: 378px; height: 352px;\" /></p>\n\n<p>The areas are:</p>\n\n<ul>\n\t<li>Below the line: <code>7/6 * 2 (Red) + 1/6 (Blue) = 15/6 = 2.5</code>.</li>\n\t<li>Above the line: <code>5/6 * 2 (Red) + 5/6 (Blue) = 15/6 = 2.5</code>.</li>\n</ul>\n\n<p>Since the areas above and below the line are equal, the output is <code>7/6 = 1.16667</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= squares.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>squares[i] = [x<sub>i</sub>, y<sub>i</sub>, l<sub>i</sub>]</code></li>\n\t<li><code>squares[i].length == 3</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= l<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li>The total area of all the squares will not exceed <code>10<sup>12</sup></code>.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    double separateSquares(vector<vector<int>>& squares) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public double separateSquares(int[][] squares) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def separateSquares(self, squares):\n        \"\"\"\n        :type squares: List[List[int]]\n        :rtype: float\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def separateSquares(self, squares: List[List[int]]) -> float:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "double separateSquares(int** squares, int squaresSize, int* squaresColSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public double SeparateSquares(int[][] squares) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} squares\n * @return {number}\n */\nvar separateSquares = function(squares) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function separateSquares(squares: number[][]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $squares\n     * @return Float\n     */\n    function separateSquares($squares) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func separateSquares(_ squares: [[Int]]) -> Double {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun separateSquares(squares: Array<IntArray>): Double {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  double separateSquares(List<List<int>> squares) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func separateSquares(squares [][]int) float64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} squares\n# @return {Float}\ndef separate_squares(squares)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def separateSquares(squares: Array[Array[Int]]): Double = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn separate_squares(squares: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (separate-squares squares)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec separate_squares(Squares :: [[integer()]]) -> float().\nseparate_squares(Squares) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec separate_squares(squares :: [[integer]]) :: float\n  def separate_squares(squares) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[[0,0,1],[2,2,1]]"
  },
  {
    "questionId": "3762",
    "questionFrontendId": "3449",
    "title": "Maximize the Minimum Game Score",
    "titleSlug": "maximize-the-minimum-game-score",
    "content": "<p>You are given an array <code>points</code> of size <code>n</code> and an integer <code>m</code>. There is another array <code>gameScore</code> of size <code>n</code>, where <code>gameScore[i]</code> represents the score achieved at the <code>i<sup>th</sup></code> game. Initially, <code>gameScore[i] == 0</code> for all <code>i</code>.</p>\n\n<p>You start at index -1, which is outside the array (before the first position at index 0). You can make <strong>at most</strong> <code>m</code> moves. In each move, you can either:</p>\n\n<ul>\n\t<li>Increase the index by 1 and add <code>points[i]</code> to <code>gameScore[i]</code>.</li>\n\t<li>Decrease the index by 1 and add <code>points[i]</code> to <code>gameScore[i]</code>.</li>\n</ul>\n\n<p><strong>Note</strong> that the index must always remain within the bounds of the array after the first move.</p>\n\n<p>Return the <strong>maximum possible minimum</strong> value in <code>gameScore</code> after <strong>at most</strong> <code>m</code> moves.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [2,4], m = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, index <code>i = -1</code> and <code>gameScore = [0, 0]</code>.</p>\n\n<table style=\"border: 1px solid black;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">Move</th>\n\t\t\t<th style=\"border: 1px solid black;\">Index</th>\n\t\t\t<th style=\"border: 1px solid black;\">gameScore</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 0]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 4]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Decrease <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[4, 4]</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The minimum value in <code>gameScore</code> is 4, and this is the maximum possible minimum among all configurations. Hence, 4 is the output.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">points = [1,2,3], m = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, index <code>i = -1</code> and <code>gameScore = [0, 0, 0]</code>.</p>\n\n<table style=\"border: 1px solid black;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">Move</th>\n\t\t\t<th style=\"border: 1px solid black;\">Index</th>\n\t\t\t<th style=\"border: 1px solid black;\">gameScore</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1, 0, 0]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1, 2, 0]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Decrease <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 2, 0]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 4, 0]</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">Increase <code>i</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 4, 3]</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The minimum value in <code>gameScore</code> is 2, and this is the maximum possible minimum among all configurations. Hence, 2 is the output.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == points.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= points[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    long long maxScore(vector<int>& points, int m) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public long maxScore(int[] points, int m) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxScore(self, points, m):\n        \"\"\"\n        :type points: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxScore(self, points: List[int], m: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "long long maxScore(int* points, int pointsSize, int m) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public long MaxScore(int[] points, int m) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} points\n * @param {number} m\n * @return {number}\n */\nvar maxScore = function(points, m) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxScore(points: number[], m: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $points\n     * @param Integer $m\n     * @return Integer\n     */\n    function maxScore($points, $m) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxScore(_ points: [Int], _ m: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxScore(points: IntArray, m: Int): Long {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxScore(List<int> points, int m) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxScore(points []int, m int) int64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} points\n# @param {Integer} m\n# @return {Integer}\ndef max_score(points, m)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxScore(points: Array[Int], m: Int): Long = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_score(points: Vec<i32>, m: i32) -> i64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-score points m)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_score(Points :: [integer()], M :: integer()) -> integer().\nmax_score(Points, M) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_score(points :: [integer], m :: integer) :: integer\n  def max_score(points, m) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[2,4]\n3"
  },
  {
    "questionId": "3761",
    "questionFrontendId": "3445",
    "title": "Maximum Difference Between Even and Odd Frequency II",
    "titleSlug": "maximum-difference-between-even-and-odd-frequency-ii",
    "content": "<p>You are given a string <code>s</code> and an integer <code>k</code>. Your task is to find the <strong>maximum</strong> difference between the frequency of <strong>two</strong> characters, <code>freq[a] - freq[b]</code>, in a <span data-keyword=\"substring\">substring</span> <code>subs</code> of <code>s</code>, such that:</p>\n\n<ul>\n\t<li><code>subs</code> has a size of <strong>at least</strong> <code>k</code>.</li>\n\t<li>Character <code>a</code> has an <em>odd frequency</em> in <code>subs</code>.</li>\n\t<li>Character <code>b</code> has an <em>even frequency</em> in <code>subs</code>.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> difference.</p>\n\n<p><strong>Note</strong> that <code>subs</code> can contain more than 2 <strong>distinct</strong> characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;12233&quot;, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For the substring <code>&quot;12233&quot;</code>, the frequency of <code>&#39;1&#39;</code> is 1 and the frequency of <code>&#39;3&#39;</code> is 2. The difference is <code>1 - 2 = -1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;1122211&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>For the substring <code>&quot;11222&quot;</code>, the frequency of <code>&#39;2&#39;</code> is 3 and the frequency of <code>&#39;1&#39;</code> is 2. The difference is <code>3 - 2 = 1</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;110&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-1</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists only of digits <code>&#39;0&#39;</code> to <code>&#39;4&#39;</code>.</li>\n\t<li>The input is generated that at least one substring has a character with an even frequency and a character with an odd frequency.</li>\n\t<li><code>1 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Sliding Window",
        "slug": "sliding-window"
      },
      {
        "name": "Enumeration",
        "slug": "enumeration"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxDifference(string s, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxDifference(String s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxDifference(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxDifference(self, s: str, k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxDifference(char* s, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxDifference(string s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxDifference = function(s, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxDifference(s: string, k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxDifference($s, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxDifference(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxDifference(s: String, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxDifference(String s, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxDifference(s string, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_difference(s, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxDifference(s: String, k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_difference(s: String, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-difference s k)\n  (-> string? exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_difference(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_difference(S, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_difference(s :: String.t, k :: integer) :: integer\n  def max_difference(s, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"12233\"\n4"
  },
  {
    "questionId": "3760",
    "questionFrontendId": "3447",
    "title": "Assign Elements to Groups with Constraints",
    "titleSlug": "assign-elements-to-groups-with-constraints",
    "content": "<p>You are given an integer array <code>groups</code>, where <code>groups[i]</code> represents the size of the <code>i<sup>th</sup></code> group. You are also given an integer array <code>elements</code>.</p>\n\n<p>Your task is to assign <strong>one</strong> element to each group based on the following rules:</p>\n\n<ul>\n\t<li>An element at index <code>j</code> can be assigned to a group <code>i</code> if <code>groups[i]</code> is <strong>divisible</strong> by <code>elements[j]</code>.</li>\n\t<li>If there are multiple elements that can be assigned, assign the element with the <strong>smallest index</strong> <code>j</code>.</li>\n\t<li>If no element satisfies the condition for a group, assign -1 to that group.</li>\n</ul>\n\n<p>Return an integer array <code>assigned</code>, where <code>assigned[i]</code> is the index of the element chosen for group <code>i</code>, or -1 if no suitable element exists.</p>\n\n<p><strong>Note</strong>: An element may be assigned to more than one group.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">groups = [8,4,3,2,4], elements = [4,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,0,-1,1,0]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li><code>elements[0] = 4</code> is assigned to groups 0, 1, and 4.</li>\n\t<li><code>elements[1] = 2</code> is assigned to group 3.</li>\n\t<li>Group 2 cannot be assigned any element.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">groups = [2,3,5,7], elements = [5,3,3]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[-1,1,0,-1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li><code>elements[1] = 3</code> is assigned to group 1.</li>\n\t<li><code>elements[0] = 5</code> is assigned to group 2.</li>\n\t<li>Groups 0 and 3 cannot be assigned any element.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">groups = [10,21,30,41], elements = [2,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,1,0,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><code>elements[0] = 2</code> is assigned to the groups with even values, and <code>elements[1] = 1</code> is assigned to the groups with odd values.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= groups.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= elements.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= groups[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= elements[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> assignElements(vector<int>& groups, vector<int>& elements) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[] assignElements(int[] groups, int[] elements) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def assignElements(self, groups, elements):\n        \"\"\"\n        :type groups: List[int]\n        :type elements: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def assignElements(self, groups: List[int], elements: List[int]) -> List[int]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* assignElements(int* groups, int groupsSize, int* elements, int elementsSize, int* returnSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[] AssignElements(int[] groups, int[] elements) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} groups\n * @param {number[]} elements\n * @return {number[]}\n */\nvar assignElements = function(groups, elements) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function assignElements(groups: number[], elements: number[]): number[] {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $groups\n     * @param Integer[] $elements\n     * @return Integer[]\n     */\n    function assignElements($groups, $elements) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func assignElements(_ groups: [Int], _ elements: [Int]) -> [Int] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun assignElements(groups: IntArray, elements: IntArray): IntArray {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<int> assignElements(List<int> groups, List<int> elements) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func assignElements(groups []int, elements []int) []int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} groups\n# @param {Integer[]} elements\n# @return {Integer[]}\ndef assign_elements(groups, elements)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def assignElements(groups: Array[Int], elements: Array[Int]): Array[Int] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn assign_elements(groups: Vec<i32>, elements: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (assign-elements groups elements)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec assign_elements(Groups :: [integer()], Elements :: [integer()]) -> [integer()].\nassign_elements(Groups, Elements) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec assign_elements(groups :: [integer], elements :: [integer]) :: [integer]\n  def assign_elements(groups, elements) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[8,4,3,2,4]\n[4,2]"
  },
  {
    "questionId": "3758",
    "questionFrontendId": "3431",
    "title": "Minimum Unlocked Indices to Sort Nums",
    "titleSlug": "minimum-unlocked-indices-to-sort-nums",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "[1,2,1,2,3,2]\n[1,0,1,1,0,1]"
  },
  {
    "questionId": "3757",
    "questionFrontendId": "3415",
    "title": "Find Products with Three Consecutive Digits ",
    "titleSlug": "find-products-with-three-consecutive-digits",
    "content": null,
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "{\"headers\":{\"Products\":[\"product_id\",\"name\"]},\"rows\":{\"Products\":[[1,\"ABC123XYZ\"],[2,\"A12B34C\"],[3,\"Product56789\"],[4,\"NoDigitsHere\"],[5,\"789Product\"],[6,\"Item003Description\"],[7,\"Product12X34\"]]}}"
  },
  {
    "questionId": "3756",
    "questionFrontendId": "3416",
    "title": "Subsequences with a Unique Middle Mode II",
    "titleSlug": "subsequences-with-a-unique-middle-mode-ii",
    "content": null,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "Combinatorics",
        "slug": "combinatorics"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "[1,1,1,1,1,1]"
  },
  {
    "questionId": "3754",
    "questionFrontendId": "3443",
    "title": "Maximum Manhattan Distance After K Changes",
    "titleSlug": "maximum-manhattan-distance-after-k-changes",
    "content": "<p>You are given a string <code>s</code> consisting of the characters <code>&#39;N&#39;</code>, <code>&#39;S&#39;</code>, <code>&#39;E&#39;</code>, and <code>&#39;W&#39;</code>, where <code>s[i]</code> indicates movements in an infinite grid:</p>\n\n<ul>\n\t<li><code>&#39;N&#39;</code> : Move north by 1 unit.</li>\n\t<li><code>&#39;S&#39;</code> : Move south by 1 unit.</li>\n\t<li><code>&#39;E&#39;</code> : Move east by 1 unit.</li>\n\t<li><code>&#39;W&#39;</code> : Move west by 1 unit.</li>\n</ul>\n\n<p>Initially, you are at the origin <code>(0, 0)</code>. You can change <strong>at most</strong> <code>k</code> characters to any of the four directions.</p>\n\n<p>Find the <strong>maximum</strong> <strong>Manhattan distance</strong> from the origin that can be achieved <strong>at any time</strong> while performing the movements <strong>in order</strong>.</p>\nThe <strong>Manhattan Distance</strong> between two cells <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and <code>(x<sub>j</sub>, y<sub>j</sub>)</code> is <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;NWSE&quot;, k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Change <code>s[2]</code> from <code>&#39;S&#39;</code> to <code>&#39;N&#39;</code>. The string <code>s</code> becomes <code>&quot;NWNE&quot;</code>.</p>\n\n<table style=\"border: 1px solid black;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">Movement</th>\n\t\t\t<th style=\"border: 1px solid black;\">Position (x, y)</th>\n\t\t\t<th style=\"border: 1px solid black;\">Manhattan Distance</th>\n\t\t\t<th style=\"border: 1px solid black;\">Maximum</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[0] == &#39;N&#39;</td>\n\t\t\t<td style=\"border: 1px solid black;\">(0, 1)</td>\n\t\t\t<td style=\"border: 1px solid black;\">0 + 1 = 1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[1] == &#39;W&#39;</td>\n\t\t\t<td style=\"border: 1px solid black;\">(-1, 1)</td>\n\t\t\t<td style=\"border: 1px solid black;\">1 + 1 = 2</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[2] == &#39;N&#39;</td>\n\t\t\t<td style=\"border: 1px solid black;\">(-1, 2)</td>\n\t\t\t<td style=\"border: 1px solid black;\">1 + 2 = 3</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">s[3] == &#39;E&#39;</td>\n\t\t\t<td style=\"border: 1px solid black;\">(0, 2)</td>\n\t\t\t<td style=\"border: 1px solid black;\">0 + 2 = 2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The maximum Manhattan distance from the origin that can be achieved is 3. Hence, 3 is the output.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;NSWWEW&quot;, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Change <code>s[1]</code> from <code>&#39;S&#39;</code> to <code>&#39;N&#39;</code>, and <code>s[4]</code> from <code>&#39;E&#39;</code> to <code>&#39;W&#39;</code>. The string <code>s</code> becomes <code>&quot;NNWWWW&quot;</code>.</p>\n\n<p>The maximum Manhattan distance from the origin that can be achieved is 6. Hence, 6 is the output.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n\t<li><code>s</code> consists of only <code>&#39;N&#39;</code>, <code>&#39;S&#39;</code>, <code>&#39;E&#39;</code>, and <code>&#39;W&#39;</code>.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Counting",
        "slug": "counting"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxDistance(string s, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxDistance(String s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxDistance(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxDistance(self, s: str, k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxDistance(char* s, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxDistance(string s, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar maxDistance = function(s, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxDistance(s: string, k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxDistance($s, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxDistance(_ s: String, _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxDistance(s: String, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxDistance(String s, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxDistance(s string, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_distance(s, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxDistance(s: String, k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_distance(s: String, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-distance s k)\n  (-> string? exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_distance(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_distance(S, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_distance(s :: String.t, k :: integer) :: integer\n  def max_distance(s, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"NWSE\"\n1"
  },
  {
    "questionId": "3753",
    "questionFrontendId": "3442",
    "title": "Maximum Difference Between Even and Odd Frequency I",
    "titleSlug": "maximum-difference-between-even-and-odd-frequency-i",
    "content": "<p>You are given a string <code>s</code> consisting of lowercase English letters. Your task is to find the <strong>maximum</strong> difference between the frequency of <strong>two</strong> characters in the string such that:</p>\n\n<ul>\n\t<li>One of the characters has an <strong>even frequency</strong> in the string.</li>\n\t<li>The other character has an <strong>odd frequency</strong> in the string.</li>\n</ul>\n\n<p>Return the <strong>maximum</strong> difference, calculated as the frequency of the character with an <b>odd</b> frequency <strong>minus</strong> the frequency of the character with an <b>even</b> frequency.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;aaaaabbc&quot;</span></p>\n\n<p><strong>Output:</strong> 3</p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>The character <code>&#39;a&#39;</code> has an <strong>odd frequency</strong> of <code><font face=\"monospace\">5</font></code><font face=\"monospace\">,</font> and <code>&#39;b&#39;</code> has an <strong>even frequency</strong> of <code><font face=\"monospace\">2</font></code>.</li>\n\t<li>The maximum difference is <code>5 - 2 = 3</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;abcabcab&quot;</span></p>\n\n<p><strong>Output:</strong> 1</p>\n\n<p><strong>Explanation:</strong></p>\n\n<ul>\n\t<li>The character <code>&#39;a&#39;</code> has an <strong>odd frequency</strong> of <code><font face=\"monospace\">3</font></code><font face=\"monospace\">,</font> and <code>&#39;c&#39;</code> has an <strong>even frequency</strong> of <font face=\"monospace\">2</font>.</li>\n\t<li>The maximum difference is <code>3 - 2 = 1</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n\t<li><code>s</code> contains at least one character with an odd frequency and one with an even frequency.</li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Counting",
        "slug": "counting"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxDifference(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxDifference(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxDifference(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxDifference(self, s: str) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxDifference(char* s) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxDifference(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxDifference = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxDifference(s: string): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxDifference($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxDifference(_ s: String) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxDifference(s: String): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxDifference(String s) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxDifference(s string) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {Integer}\ndef max_difference(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxDifference(s: String): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_difference(s: String) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-difference s)\n  (-> string? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_difference(S :: unicode:unicode_binary()) -> integer().\nmax_difference(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_difference(s :: String.t) :: integer\n  def max_difference(s) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"aaaaabbc\""
  },
  {
    "questionId": "3751",
    "questionFrontendId": "3434",
    "title": "Maximum Frequency After Subarray Operation",
    "titleSlug": "maximum-frequency-after-subarray-operation",
    "content": "<p>You are given an array <code>nums</code> of length <code>n</code>. You are also given an integer <code>k</code>.</p>\n\n<p>You perform the following operation on <code>nums</code> <strong>once</strong>:</p>\n\n<ul>\n\t<li>Select a <span data-keyword=\"subarray-nonempty\">subarray</span> <code>nums[i..j]</code> where <code>0 &lt;= i &lt;= j &lt;= n - 1</code>.</li>\n\t<li>Select an integer <code>x</code> and add <code>x</code> to <strong>all</strong> the elements in <code>nums[i..j]</code>.</li>\n</ul>\n\n<p>Find the <strong>maximum</strong> frequency of the value <code>k</code> after the operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4,5,6], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After adding -5 to <code>nums[2..5]</code>, 1 has a frequency of 2 in <code>[1, 2, -2, -1, 0, 1]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [10,2,3,4,5,5,4,3,2,2], k = 10</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After adding 8 to <code>nums[1..9]</code>, 10 has a frequency of 4 in <code>[10, 10, 11, 12, 13, 13, 12, 11, 10, 10]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxFrequency(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxFrequency(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxFrequency(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxFrequency(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxFrequency(int* nums, int numsSize, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxFrequency(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxFrequency = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxFrequency(nums: number[], k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxFrequency($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxFrequency(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxFrequency(nums: IntArray, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxFrequency(List<int> nums, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxFrequency(nums []int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_frequency(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxFrequency(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_frequency(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-frequency nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_frequency(Nums :: [integer()], K :: integer()) -> integer().\nmax_frequency(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_frequency(nums :: [integer], k :: integer) :: integer\n  def max_frequency(nums, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,3,4,5,6]\n1"
  },
  {
    "questionId": "3749",
    "questionFrontendId": "3406",
    "title": "Find the Lexicographically Largest String From the Box II",
    "titleSlug": "find-the-lexicographically-largest-string-from-the-box-ii",
    "content": null,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Two Pointers",
        "slug": "two-pointers"
      },
      {
        "name": "String",
        "slug": "string"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "\"dbca\"\n2"
  },
  {
    "questionId": "3748",
    "questionFrontendId": "3446",
    "title": "Sort Matrix by Diagonals",
    "titleSlug": "sort-matrix-by-diagonals",
    "content": "<p>You are given an <code>n x n</code> square matrix of integers <code>grid</code>. Return the matrix such that:</p>\n\n<ul>\n\t<li>The diagonals in the <strong>bottom-left triangle</strong> (including the middle diagonal) are sorted in <strong>non-increasing order</strong>.</li>\n\t<li>The diagonals in the <strong>top-right triangle</strong> are sorted in <strong>non-decreasing order</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,7,3],[9,8,2],[4,5,6]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[8,2,3],[9,6,7],[4,5,1]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/29/4052example1drawio.png\" style=\"width: 461px; height: 181px;\" /></p>\n\n<p>The diagonals with a black arrow (bottom-left triangle) should be sorted in non-increasing order:</p>\n\n<ul>\n\t<li><code>[1, 8, 6]</code> becomes <code>[8, 6, 1]</code>.</li>\n\t<li><code>[9, 5]</code> and <code>[4]</code> remain unchanged.</li>\n</ul>\n\n<p>The diagonals with a blue arrow (top-right triangle) should be sorted in non-decreasing order:</p>\n\n<ul>\n\t<li><code>[7, 2]</code> becomes <code>[2, 7]</code>.</li>\n\t<li><code>[3]</code> remains unchanged.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[0,1],[1,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[2,1],[1,0]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/29/4052example2adrawio.png\" style=\"width: 383px; height: 141px;\" /></p>\n\n<p>The diagonals with a black arrow must be non-increasing, so <code>[0, 2]</code> is changed to <code>[2, 0]</code>. The other diagonals are already in the correct order.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[[1]]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Diagonals with exactly one element are already in order, so no changes are needed.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>grid.length == grid[i].length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> sortMatrix(vector<vector<int>>& grid) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int[][] sortMatrix(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def sortMatrix(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sortMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** sortMatrix(int** grid, int gridSize, int* gridColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int[][] SortMatrix(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar sortMatrix = function(grid) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function sortMatrix(grid: number[][]): number[][] {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function sortMatrix($grid) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func sortMatrix(_ grid: [[Int]]) -> [[Int]] {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun sortMatrix(grid: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  List<List<int>> sortMatrix(List<List<int>> grid) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func sortMatrix(grid [][]int) [][]int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} grid\n# @return {Integer[][]}\ndef sort_matrix(grid)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def sortMatrix(grid: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn sort_matrix(grid: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (sort-matrix grid)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec sort_matrix(Grid :: [[integer()]]) -> [[integer()]].\nsort_matrix(Grid) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec sort_matrix(grid :: [[integer]]) :: [[integer]]\n  def sort_matrix(grid) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[[1,7,3],[9,8,2],[4,5,6]]"
  },
  {
    "questionId": "3747",
    "questionFrontendId": "3423",
    "title": "Maximum Difference Between Adjacent Elements in a Circular Array",
    "titleSlug": "maximum-difference-between-adjacent-elements-in-a-circular-array",
    "content": "<p>Given a <strong>circular</strong> array <code>nums</code>, find the <b>maximum</b> absolute difference between adjacent elements.</p>\n\n<p><strong>Note</strong>: In a circular array, the first and last elements are adjacent.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Because <code>nums</code> is circular, <code>nums[0]</code> and <code>nums[2]</code> are adjacent. They have the maximum absolute difference of <code>|4 - 1| = 3</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [-5,-10,-5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The adjacent elements <code>nums[0]</code> and <code>nums[1]</code> have the maximum absolute difference of <code>|-5 - (-10)| = 5</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxAdjacentDistance(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxAdjacentDistance(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxAdjacentDistance(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxAdjacentDistance(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxAdjacentDistance(int* nums, int numsSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxAdjacentDistance(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxAdjacentDistance = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxAdjacentDistance(nums: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxAdjacentDistance($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxAdjacentDistance(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxAdjacentDistance(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxAdjacentDistance(List<int> nums) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxAdjacentDistance(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_adjacent_distance(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxAdjacentDistance(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_adjacent_distance(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-adjacent-distance nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_adjacent_distance(Nums :: [integer()]) -> integer().\nmax_adjacent_distance(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_adjacent_distance(nums :: [integer]) :: integer\n  def max_adjacent_distance(nums) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,4]"
  },
  {
    "questionId": "3746",
    "questionFrontendId": "3401",
    "title": "Find Circular Gift Exchange Chains",
    "titleSlug": "find-circular-gift-exchange-chains",
    "content": null,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "{\"headers\":{\"SecretSanta\":[\"giver_id\",\"receiver_id\",\"gift_value\"]},\"rows\":{\"SecretSanta\":[[1,2,20],[2,3,30],[3,1,40],[4,5,25],[5,4,35]]}}"
  },
  {
    "questionId": "3743",
    "questionFrontendId": "3439",
    "title": "Reschedule Meetings for Maximum Free Time I",
    "titleSlug": "reschedule-meetings-for-maximum-free-time-i",
    "content": "<p>You are given an integer <code>eventTime</code> denoting the duration of an event, where the event occurs from time <code>t = 0</code> to time <code>t = eventTime</code>.</p>\n\n<p>You are also given two integer arrays <code>startTime</code> and <code>endTime</code>, each of length <code>n</code>. These represent the start and end time of <code>n</code> <strong>non-overlapping</strong> meetings, where the <code>i<sup>th</sup></code> meeting occurs during the time <code>[startTime[i], endTime[i]]</code>.</p>\n\n<p>You can reschedule <strong>at most</strong> <code>k</code> meetings by moving their start time while maintaining the <strong>same duration</strong>, to <strong>maximize</strong> the <strong>longest</strong> <em>continuous period of free time</em> during the event.</p>\n\n<p>The <strong>relative</strong> order of all the meetings should stay the<em> same</em> and they should remain non-overlapping.</p>\n\n<p>Return the <strong>maximum</strong> amount of free time possible after rearranging the meetings.</p>\n\n<p><strong>Note</strong> that the meetings can <strong>not</strong> be rescheduled to a time outside the event.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 5, k = 1, startTime = [1,3], endTime = [2,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/21/example0_rescheduled.png\" style=\"width: 375px; height: 123px;\" /></p>\n\n<p>Reschedule the meeting at <code>[1, 2]</code> to <code>[2, 3]</code>, leaving no meetings during the time <code>[0, 2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 10, k = 1, startTime = [0,2,9], endTime = [1,4,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/21/example1_rescheduled.png\" style=\"width: 375px; height: 125px;\" /></p>\n\n<p>Reschedule the meeting at <code>[2, 4]</code> to <code>[1, 3]</code>, leaving no meetings during the time <code>[3, 9]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 5, k = 2, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no time during the event not occupied by meetings.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= eventTime &lt;= 10<sup>9</sup></code></li>\n\t<li><code>n == startTime.length == endTime.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n\t<li><code>0 &lt;= startTime[i] &lt; endTime[i] &lt;= eventTime</code></li>\n\t<li><code>endTime[i] &lt;= startTime[i + 1]</code> where <code>i</code> lies in the range <code>[0, n - 2]</code>.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sliding Window",
        "slug": "sliding-window"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxFreeTime(int eventTime, int k, int[] startTime, int[] endTime) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxFreeTime(self, eventTime, k, startTime, endTime):\n        \"\"\"\n        :type eventTime: int\n        :type k: int\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxFreeTime(self, eventTime: int, k: int, startTime: List[int], endTime: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxFreeTime(int eventTime, int k, int* startTime, int startTimeSize, int* endTime, int endTimeSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxFreeTime(int eventTime, int k, int[] startTime, int[] endTime) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} eventTime\n * @param {number} k\n * @param {number[]} startTime\n * @param {number[]} endTime\n * @return {number}\n */\nvar maxFreeTime = function(eventTime, k, startTime, endTime) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxFreeTime(eventTime: number, k: number, startTime: number[], endTime: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $eventTime\n     * @param Integer $k\n     * @param Integer[] $startTime\n     * @param Integer[] $endTime\n     * @return Integer\n     */\n    function maxFreeTime($eventTime, $k, $startTime, $endTime) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxFreeTime(_ eventTime: Int, _ k: Int, _ startTime: [Int], _ endTime: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxFreeTime(eventTime: Int, k: Int, startTime: IntArray, endTime: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxFreeTime(int eventTime, int k, List<int> startTime, List<int> endTime) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxFreeTime(eventTime int, k int, startTime []int, endTime []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} event_time\n# @param {Integer} k\n# @param {Integer[]} start_time\n# @param {Integer[]} end_time\n# @return {Integer}\ndef max_free_time(event_time, k, start_time, end_time)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxFreeTime(eventTime: Int, k: Int, startTime: Array[Int], endTime: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_free_time(event_time: i32, k: i32, start_time: Vec<i32>, end_time: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-free-time eventTime k startTime endTime)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_free_time(EventTime :: integer(), K :: integer(), StartTime :: [integer()], EndTime :: [integer()]) -> integer().\nmax_free_time(EventTime, K, StartTime, EndTime) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_free_time(event_time :: integer, k :: integer, start_time :: [integer], end_time :: [integer]) :: integer\n  def max_free_time(event_time, k, start_time, end_time) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "5\n1\n[1,3]\n[2,5]"
  },
  {
    "questionId": "3741",
    "questionFrontendId": "3440",
    "title": "Reschedule Meetings for Maximum Free Time II",
    "titleSlug": "reschedule-meetings-for-maximum-free-time-ii",
    "content": "<p>You are given an integer <code>eventTime</code> denoting the duration of an event. You are also given two integer arrays <code>startTime</code> and <code>endTime</code>, each of length <code>n</code>.</p>\n\n<p>These represent the start and end times of <code>n</code> <strong>non-overlapping</strong> meetings that occur during the event between time <code>t = 0</code> and time <code>t = eventTime</code>, where the <code>i<sup>th</sup></code> meeting occurs during the time <code>[startTime[i], endTime[i]].</code></p>\n\n<p>You can reschedule <strong>at most </strong>one meeting by moving its start time while maintaining the <strong>same duration</strong>, such that the meetings remain non-overlapping, to <strong>maximize</strong> the <strong>longest</strong> <em>continuous period of free time</em> during the event.</p>\n\n<p>Return the <strong>maximum</strong> amount of free time possible after rearranging the meetings.</p>\n\n<p><strong>Note</strong> that the meetings can <strong>not</strong> be rescheduled to a time outside the event and they should remain non-overlapping.</p>\n\n<p><strong>Note:</strong> <em>In this version</em>, it is <strong>valid</strong> for the relative ordering of the meetings to change after rescheduling one meeting.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 5, startTime = [1,3], endTime = [2,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/22/example0_rescheduled.png\" style=\"width: 375px; height: 123px;\" /></p>\n\n<p>Reschedule the meeting at <code>[1, 2]</code> to <code>[2, 3]</code>, leaving no meetings during the time <code>[0, 2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 10, startTime = [0,7,9], endTime = [1,8,10]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">7</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/22/rescheduled_example0.png\" style=\"width: 375px; height: 125px;\" /></p>\n\n<p>Reschedule the meeting at <code>[0, 1]</code> to <code>[8, 9]</code>, leaving no meetings during the time <code>[0, 7]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 10, startTime = [0,3,7,9], endTime = [1,4,8,10]</span></p>\n\n<p><strong>Output:</strong> 6</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/28/image3.png\" style=\"width: 375px; height: 125px;\" /></strong></p>\n\n<p>Reschedule the meeting at <code>[3, 4]</code> to <code>[8, 9]</code>, leaving no meetings during the time <code>[1, 7]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">eventTime = 5, startTime = [0,1,2,3,4], endTime = [1,2,3,4,5]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no time during the event not occupied by meetings.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= eventTime &lt;= 10<sup>9</sup></code></li>\n\t<li><code>n == startTime.length == endTime.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= startTime[i] &lt; endTime[i] &lt;= eventTime</code></li>\n\t<li><code>endTime[i] &lt;= startTime[i + 1]</code> where <code>i</code> lies in the range <code>[0, n - 2]</code>.</li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Enumeration",
        "slug": "enumeration"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxFreeTime(int eventTime, vector<int>& startTime, vector<int>& endTime) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxFreeTime(self, eventTime, startTime, endTime):\n        \"\"\"\n        :type eventTime: int\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxFreeTime(self, eventTime: int, startTime: List[int], endTime: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxFreeTime(int eventTime, int* startTime, int startTimeSize, int* endTime, int endTimeSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxFreeTime(int eventTime, int[] startTime, int[] endTime) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} eventTime\n * @param {number[]} startTime\n * @param {number[]} endTime\n * @return {number}\n */\nvar maxFreeTime = function(eventTime, startTime, endTime) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxFreeTime(eventTime: number, startTime: number[], endTime: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $eventTime\n     * @param Integer[] $startTime\n     * @param Integer[] $endTime\n     * @return Integer\n     */\n    function maxFreeTime($eventTime, $startTime, $endTime) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxFreeTime(_ eventTime: Int, _ startTime: [Int], _ endTime: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxFreeTime(eventTime: Int, startTime: IntArray, endTime: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxFreeTime(int eventTime, List<int> startTime, List<int> endTime) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxFreeTime(eventTime int, startTime []int, endTime []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} event_time\n# @param {Integer[]} start_time\n# @param {Integer[]} end_time\n# @return {Integer}\ndef max_free_time(event_time, start_time, end_time)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxFreeTime(eventTime: Int, startTime: Array[Int], endTime: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_free_time(event_time: i32, start_time: Vec<i32>, end_time: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-free-time eventTime startTime endTime)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_free_time(EventTime :: integer(), StartTime :: [integer()], EndTime :: [integer()]) -> integer().\nmax_free_time(EventTime, StartTime, EndTime) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_free_time(event_time :: integer, start_time :: [integer], end_time :: [integer]) :: integer\n  def max_free_time(event_time, start_time, end_time) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "5\n[1,3]\n[2,5]"
  },
  {
    "questionId": "3740",
    "questionFrontendId": "3400",
    "title": "Maximum Number of Matching Indices After Right Shifts",
    "titleSlug": "maximum-number-of-matching-indices-after-right-shifts",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Two Pointers",
        "slug": "two-pointers"
      },
      {
        "name": "Simulation",
        "slug": "simulation"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "[3,1,2,3,1,2]\n[1,2,3,1,2,3]"
  },
  {
    "questionId": "3739",
    "questionFrontendId": "3426",
    "title": "Manhattan Distances of All Arrangements of Pieces",
    "titleSlug": "manhattan-distances-of-all-arrangements-of-pieces",
    "content": "<p>You are given three integers <code><font face=\"monospace\">m</font></code>, <code><font face=\"monospace\">n</font></code>, and <code>k</code>.</p>\n\n<p>There is a rectangular grid of size <code>m &times; n</code> containing <code>k</code> identical pieces. Return the sum of Manhattan distances between every pair of pieces over all <strong>valid arrangements</strong> of pieces.</p>\n\n<p>A <strong>valid arrangement</strong> is a placement of all <code>k</code> pieces on the grid with <strong>at most</strong> one piece per cell.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>The Manhattan Distance between two cells <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and <code>(x<sub>j</sub>, y<sub>j</sub>)</code> is <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 2, n = 2, k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">8</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid arrangements of pieces on the board are:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/25/4040example1.drawio\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/25/untitled-diagramdrawio.png\" style=\"width: 441px; height: 204px;\" /></p>\n\n<ul>\n\t<li>In the first 4 arrangements, the Manhattan distance between the two pieces is 1.</li>\n\t<li>In the last 2 arrangements, the Manhattan distance between the two pieces is 2.</li>\n</ul>\n\n<p>Thus, the total Manhattan distance across all valid arrangements is <code>1 + 1 + 1 + 1 + 2 + 2 = 8</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">m = 1, n = 4, k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">20</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The valid arrangements of pieces on the board are:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/25/4040example2drawio.png\" style=\"width: 762px; height: 41px;\" /></p>\n\n<ul>\n\t<li>The first and last arrangements have a total Manhattan distance of <code>1 + 1 + 2 = 4</code>.</li>\n\t<li>The middle two arrangements have a total Manhattan distance of <code>1 + 2 + 3 = 6</code>.</li>\n</ul>\n\n<p>The total Manhattan distance between all pairs of pieces across all arrangements is <code>4 + 6 + 6 + 4 = 20</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">2 &lt;= k &lt;= m * n</font></code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "Combinatorics",
        "slug": "combinatorics"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int distanceSum(int m, int n, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int distanceSum(int m, int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def distanceSum(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def distanceSum(self, m: int, n: int, k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int distanceSum(int m, int n, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int DistanceSum(int m, int n, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} m\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar distanceSum = function(m, n, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function distanceSum(m: number, n: number, k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function distanceSum($m, $n, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func distanceSum(_ m: Int, _ n: Int, _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun distanceSum(m: Int, n: Int, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int distanceSum(int m, int n, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func distanceSum(m int, n int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef distance_sum(m, n, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def distanceSum(m: Int, n: Int, k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn distance_sum(m: i32, n: i32, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (distance-sum m n k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec distance_sum(M :: integer(), N :: integer(), K :: integer()) -> integer().\ndistance_sum(M, N, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec distance_sum(m :: integer, n :: integer, k :: integer) :: integer\n  def distance_sum(m, n, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "2\n2\n2"
  },
  {
    "questionId": "3737",
    "questionFrontendId": "3429",
    "title": "Paint House IV",
    "titleSlug": "paint-house-iv",
    "content": "<p>You are given an <strong>even</strong> integer <code>n</code> representing the number of houses arranged in a straight line, and a 2D array <code>cost</code> of size <code>n x 3</code>, where <code>cost[i][j]</code> represents the cost of painting house <code>i</code> with color <code>j + 1</code>.</p>\n\n<p>The houses will look <strong>beautiful</strong> if they satisfy the following conditions:</p>\n\n<ul>\n\t<li>No <strong>two</strong> adjacent houses are painted the same color.</li>\n\t<li>Houses <strong>equidistant</strong> from the ends of the row are <strong>not</strong> painted the same color. For example, if <code>n = 6</code>, houses at positions <code>(0, 5)</code>, <code>(1, 4)</code>, and <code>(2, 3)</code> are considered equidistant.</li>\n</ul>\n\n<p>Return the <strong>minimum</strong> cost to paint the houses such that they look <strong>beautiful</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, cost = [[3,5,7],[6,2,9],[4,8,1],[7,3,5]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">9</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal painting sequence is <code>[1, 2, 3, 2]</code> with corresponding costs <code>[3, 2, 1, 3]</code>. This satisfies the following conditions:</p>\n\n<ul>\n\t<li>No adjacent houses have the same color.</li>\n\t<li>Houses at positions 0 and 3 (equidistant from the ends) are not painted the same color <code>(1 != 2)</code>.</li>\n\t<li>Houses at positions 1 and 2 (equidistant from the ends) are not painted the same color <code>(2 != 3)</code>.</li>\n</ul>\n\n<p>The minimum cost to paint the houses so that they look beautiful is <code>3 + 2 + 1 + 3 = 9</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 6, cost = [[2,4,6],[5,3,8],[7,1,9],[4,6,2],[3,5,7],[8,2,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">18</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal painting sequence is <code>[1, 3, 2, 3, 1, 2]</code> with corresponding costs <code>[2, 8, 1, 2, 3, 2]</code>. This satisfies the following conditions:</p>\n\n<ul>\n\t<li>No adjacent houses have the same color.</li>\n\t<li>Houses at positions 0 and 5 (equidistant from the ends) are not painted the same color <code>(1 != 2)</code>.</li>\n\t<li>Houses at positions 1 and 4 (equidistant from the ends) are not painted the same color <code>(3 != 1)</code>.</li>\n\t<li>Houses at positions 2 and 3 (equidistant from the ends) are not painted the same color <code>(2 != 3)</code>.</li>\n</ul>\n\n<p>The minimum cost to paint the houses so that they look beautiful is <code>2 + 8 + 1 + 2 + 3 + 2 = 18</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>cost.length == n</code></li>\n\t<li><code>cost[i].length == 3</code></li>\n\t<li><code>0 &lt;= cost[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    long long minCost(int n, vector<vector<int>>& cost) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public long minCost(int n, int[][] cost) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minCost(self, n, cost):\n        \"\"\"\n        :type n: int\n        :type cost: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minCost(self, n: int, cost: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "long long minCost(int n, int** cost, int costSize, int* costColSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public long MinCost(int n, int[][] cost) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number} n\n * @param {number[][]} cost\n * @return {number}\n */\nvar minCost = function(n, cost) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minCost(n: number, cost: number[][]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $cost\n     * @return Integer\n     */\n    function minCost($n, $cost) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minCost(_ n: Int, _ cost: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minCost(n: Int, cost: Array<IntArray>): Long {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minCost(int n, List<List<int>> cost) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minCost(n int, cost [][]int) int64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer} n\n# @param {Integer[][]} cost\n# @return {Integer}\ndef min_cost(n, cost)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minCost(n: Int, cost: Array[Array[Int]]): Long = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_cost(n: i32, cost: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-cost n cost)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_cost(N :: integer(), Cost :: [[integer()]]) -> integer().\nmin_cost(N, Cost) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_cost(n :: integer, cost :: [[integer]]) :: integer\n  def min_cost(n, cost) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "4\n[[3,5,7],[6,2,9],[4,8,1],[7,3,5]]"
  },
  {
    "questionId": "3736",
    "questionFrontendId": "3438",
    "title": "Find Valid Pair of Adjacent Digits in String",
    "titleSlug": "find-valid-pair-of-adjacent-digits-in-string",
    "content": "<p>You are given a string <code>s</code> consisting only of digits. A <strong>valid pair</strong> is defined as two <strong>adjacent</strong> digits in <code>s</code> such that:</p>\n\n<ul>\n\t<li>The first digit is <strong>not equal</strong> to the second.</li>\n\t<li>Each digit in the pair appears in <code>s</code> <strong>exactly</strong> as many times as its numeric value.</li>\n</ul>\n\n<p>Return the first <strong>valid pair</strong> found in the string <code>s</code> when traversing from left to right. If no valid pair exists, return an empty string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;2523533&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;23&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Digit <code>&#39;2&#39;</code> appears 2 times and digit <code>&#39;3&#39;</code> appears 3 times. Each digit in the pair <code>&quot;23&quot;</code> appears in <code>s</code> exactly as many times as its numeric value. Hence, the output is <code>&quot;23&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;221&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;21&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Digit <code>&#39;2&#39;</code> appears 2 times and digit <code>&#39;1&#39;</code> appears 1 time. Hence, the output is <code>&quot;21&quot;</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;22&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are no valid adjacent pairs.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> only consists of digits from <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>.</li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "String",
        "slug": "string"
      },
      {
        "name": "Counting",
        "slug": "counting"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    string findValidPair(string s) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public String findValidPair(String s) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def findValidPair(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def findValidPair(self, s: str) -> str:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "char* findValidPair(char* s) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public string FindValidPair(string s) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar findValidPair = function(s) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function findValidPair(s: string): string {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function findValidPair($s) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func findValidPair(_ s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun findValidPair(s: String): String {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  String findValidPair(String s) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func findValidPair(s string) string {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {String} s\n# @return {String}\ndef find_valid_pair(s)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def findValidPair(s: String): String = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn find_valid_pair(s: String) -> String {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (find-valid-pair s)\n  (-> string? string?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec find_valid_pair(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfind_valid_pair(S) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec find_valid_pair(s :: String.t) :: String.t\n  def find_valid_pair(s) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "\"2523533\""
  },
  {
    "questionId": "3735",
    "questionFrontendId": "3391",
    "title": "Design a 3D Binary Matrix with Efficient Layer Tracking",
    "titleSlug": "design-a-3d-binary-matrix-with-efficient-layer-tracking",
    "content": null,
    "difficulty": "Medium",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Hash Table",
        "slug": "hash-table"
      },
      {
        "name": "Design",
        "slug": "design"
      },
      {
        "name": "Heap (Priority Queue)",
        "slug": "heap-priority-queue"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      },
      {
        "name": "Ordered Set",
        "slug": "ordered-set"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "[\"Matrix3D\",\"setCell\",\"largestMatrix\",\"setCell\",\"largestMatrix\",\"setCell\",\"largestMatrix\"]\n[[3],[0,0,0],[],[1,1,2],[],[0,0,1],[]]"
  },
  {
    "questionId": "3733",
    "questionFrontendId": "3459",
    "title": "Length of Longest V-Shaped Diagonal Segment",
    "titleSlug": "length-of-longest-v-shaped-diagonal-segment",
    "content": "<p>You are given a 2D integer matrix <code>grid</code> of size <code>n x m</code>, where each element is either <code>0</code>, <code>1</code>, or <code>2</code>.</p>\n\n<p>A <strong>V-shaped diagonal segment</strong> is defined as:</p>\n\n<ul>\n\t<li>The segment starts with <code>1</code>.</li>\n\t<li>The subsequent elements follow this infinite sequence: <code>2, 0, 2, 0, ...</code>.</li>\n\t<li>The segment:\n\t<ul>\n\t\t<li>Starts <strong>along</strong> a diagonal direction (top-left to bottom-right, bottom-right to top-left, top-right to bottom-left, or bottom-left to top-right).</li>\n\t\t<li>Continues the<strong> sequence</strong> in the same diagonal direction.</li>\n\t\t<li>Makes<strong> at most one clockwise 90-degree</strong><strong> turn</strong> to another diagonal direction while <strong>maintaining</strong> the sequence.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2025/01/11/length_of_longest3.jpg\" style=\"width: 481px; height: 202px;\" /></p>\n\n<p>Return the <strong>length</strong> of the <strong>longest</strong> <strong>V-shaped diagonal segment</strong>. If no valid segment <em>exists</em>, return 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/09/matrix_1-2.jpg\" style=\"width: 201px; height: 192px;\" /></p>\n\n<p>The longest V-shaped diagonal segment has a length of 5 and follows these coordinates: <code>(0,2) &rarr; (1,3) &rarr; (2,4)</code>, takes a <strong>90-degree clockwise turn</strong> at <code>(2,4)</code>, and continues as <code>(3,3) &rarr; (4,2)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/09/matrix_2.jpg\" style=\"width: 201px; height: 201px;\" /></strong></p>\n\n<p>The longest V-shaped diagonal segment has a length of 4 and follows these coordinates: <code>(2,3) &rarr; (3,2)</code>, takes a <strong>90-degree clockwise turn</strong> at <code>(3,2)</code>, and continues as <code>(2,1) &rarr; (1,0)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">5</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/12/09/matrix_3.jpg\" style=\"width: 201px; height: 201px;\" /></strong></p>\n\n<p>The longest V-shaped diagonal segment has a length of 5 and follows these coordinates: <code>(0,0) &rarr; (1,1) &rarr; (2,2) &rarr; (3,3) &rarr; (4,4)</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">grid = [[1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">1</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The longest V-shaped diagonal segment has a length of 1 and follows these coordinates: <code>(0,0)</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>m == grid[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 500</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code>, <code>1</code> or <code>2</code>.</li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Memoization",
        "slug": "memoization"
      },
      {
        "name": "Matrix",
        "slug": "matrix"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int lenOfVDiagonal(vector<vector<int>>& grid) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int lenOfVDiagonal(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def lenOfVDiagonal(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def lenOfVDiagonal(self, grid: List[List[int]]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int lenOfVDiagonal(int** grid, int gridSize, int* gridColSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int LenOfVDiagonal(int[][] grid) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar lenOfVDiagonal = function(grid) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function lenOfVDiagonal(grid: number[][]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function lenOfVDiagonal($grid) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func lenOfVDiagonal(_ grid: [[Int]]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun lenOfVDiagonal(grid: Array<IntArray>): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int lenOfVDiagonal(List<List<int>> grid) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func lenOfVDiagonal(grid [][]int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[][]} grid\n# @return {Integer}\ndef len_of_v_diagonal(grid)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def lenOfVDiagonal(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn len_of_v_diagonal(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (len-of-v-diagonal grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec len_of_v_diagonal(Grid :: [[integer()]]) -> integer().\nlen_of_v_diagonal(Grid) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec len_of_v_diagonal(grid :: [[integer]]) :: integer\n  def len_of_v_diagonal(grid) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]"
  },
  {
    "questionId": "3731",
    "questionFrontendId": "3427",
    "title": "Sum of Variable Length Subarrays",
    "titleSlug": "sum-of-variable-length-subarrays",
    "content": "<p>You are given an integer array <code>nums</code> of size <code>n</code>. For <strong>each</strong> index <code>i</code> where <code>0 &lt;= i &lt; n</code>, define a <span data-keyword=\"subarray-nonempty\">subarray</span> <code>nums[start ... i]</code> where <code>start = max(0, i - nums[i])</code>.</p>\n\n<p>Return the total sum of all elements from the subarray defined for each index in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,3,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">11</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table style=\"border: 1px solid black;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">i</th>\n\t\t\t<th style=\"border: 1px solid black;\">Subarray</th>\n\t\t\t<th style=\"border: 1px solid black;\">Sum</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[0] = [2]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[0 ... 1] = [2, 3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[1 ... 2] = [3, 1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><strong>Total Sum</strong></td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">11</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The total sum is 11. Hence, 11 is the output.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [3,1,1,2]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<table style=\"border: 1px solid black;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\">i</th>\n\t\t\t<th style=\"border: 1px solid black;\">Subarray</th>\n\t\t\t<th style=\"border: 1px solid black;\">Sum</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">0</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[0] = [3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[0 ... 1] = [3, 1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[1 ... 2] = [1, 1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\"><code>nums[1 ... 3] = [1, 1, 2]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><strong>Total Sum</strong></td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">13</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The total sum is 13. Hence, 13 is the output.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Prefix Sum",
        "slug": "prefix-sum"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int subarraySum(vector<int>& nums) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int subarraySum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def subarraySum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def subarraySum(self, nums: List[int]) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int subarraySum(int* nums, int numsSize) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int SubarraySum(int[] nums) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar subarraySum = function(nums) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function subarraySum(nums: number[]): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function subarraySum($nums) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func subarraySum(_ nums: [Int]) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun subarraySum(nums: IntArray): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int subarraySum(List<int> nums) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func subarraySum(nums []int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef subarray_sum(nums)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def subarraySum(nums: Array[Int]): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn subarray_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (subarray-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec subarray_sum(Nums :: [integer()]) -> integer().\nsubarray_sum(Nums) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec subarray_sum(nums :: [integer]) :: integer\n  def subarray_sum(nums) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[2,3,1]"
  },
  {
    "questionId": "3726",
    "questionFrontendId": "3390",
    "title": "Longest Team Pass Streak",
    "titleSlug": "longest-team-pass-streak",
    "content": null,
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Database",
        "slug": "database"
      }
    ],
    "codeSnippets": null,
    "sampleTestCase": "{\"headers\":{\"Teams\":[\"player_id\",\"team_name\"],\"Passes\":[\"pass_from\",\"time_stamp\",\"pass_to\"]},\"rows\":{\"Teams\":[[1,\"Arsenal\"],[2,\"Arsenal\"],[3,\"Arsenal\"],[4,\"Arsenal\"],[5,\"Chelsea\"],[6,\"Chelsea\"],[7,\"Chelsea\"],[8,\"Chelsea\"]],\"Passes\":[[1,\"00:05\",2],[2,\"00:07\",3],[3,\"00:08\",4],[4,\"00:10\",5],[6,\"00:15\",7],[7,\"00:17\",8],[8,\"00:20\",6],[6,\"00:22\",5],[1,\"00:25\",2],[2,\"00:27\",3]]}}"
  },
  {
    "questionId": "3725",
    "questionFrontendId": "3430",
    "title": "Maximum and Minimum Sums of at Most Size K Subarrays",
    "titleSlug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays",
    "content": "<p>You are given an integer array <code>nums</code> and a <strong>positive</strong> integer <code>k</code>. Return the sum of the <strong>maximum</strong> and <strong>minimum</strong> elements of all <span data-keyword=\"subarray-nonempty\">subarrays</span> with <strong>at most</strong> <code>k</code> elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">20</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarrays of <code>nums</code> with at most 2 elements are:</p>\n\n<table style=\"border: 1px solid black;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\"><b>Subarray</b></th>\n\t\t\t<th style=\"border: 1px solid black;\">Minimum</th>\n\t\t\t<th style=\"border: 1px solid black;\">Maximum</th>\n\t\t\t<th style=\"border: 1px solid black;\">Sum</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1, 2]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[2, 3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t\t<td style=\"border: 1px solid black;\">3</td>\n\t\t\t<td style=\"border: 1px solid black;\">5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><strong>Final Total</strong></td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">20</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The output would be 20.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,-3,1], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The subarrays of <code>nums</code> with at most 2 elements are:</p>\n\n<table style=\"border: 1px solid black;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"border: 1px solid black;\"><b>Subarray</b></th>\n\t\t\t<th style=\"border: 1px solid black;\">Minimum</th>\n\t\t\t<th style=\"border: 1px solid black;\">Maximum</th>\n\t\t\t<th style=\"border: 1px solid black;\">Sum</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[-3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">-3</td>\n\t\t\t<td style=\"border: 1px solid black;\">-3</td>\n\t\t\t<td style=\"border: 1px solid black;\">-6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[1, -3]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">-3</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">-2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><code>[-3, 1]</code></td>\n\t\t\t<td style=\"border: 1px solid black;\">-3</td>\n\t\t\t<td style=\"border: 1px solid black;\">1</td>\n\t\t\t<td style=\"border: 1px solid black;\">-2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 1px solid black;\"><strong>Final Total</strong></td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">&nbsp;</td>\n\t\t\t<td style=\"border: 1px solid black;\">-6</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The output would be -6.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 80000</code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
    "difficulty": "Hard",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      },
      {
        "name": "Math",
        "slug": "math"
      },
      {
        "name": "Stack",
        "slug": "stack"
      },
      {
        "name": "Monotonic Stack",
        "slug": "monotonic-stack"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    long long minMaxSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public long minMaxSubarraySum(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def minMaxSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def minMaxSubarraySum(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "long long minMaxSubarraySum(int* nums, int numsSize, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public long MinMaxSubarraySum(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minMaxSubarraySum = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function minMaxSubarraySum(nums: number[], k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minMaxSubarraySum($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func minMaxSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun minMaxSubarraySum(nums: IntArray, k: Int): Long {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int minMaxSubarraySum(List<int> nums, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func minMaxSubarraySum(nums []int, k int) int64 {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_max_subarray_sum(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def minMaxSubarraySum(nums: Array[Int], k: Int): Long = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn min_max_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (min-max-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec min_max_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmin_max_subarray_sum(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec min_max_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def min_max_subarray_sum(nums, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,3]\n2"
  },
  {
    "questionId": "3723",
    "questionFrontendId": "3452",
    "title": "Sum of Good Numbers",
    "titleSlug": "sum-of-good-numbers",
    "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, an element <code>nums[i]</code> is considered <strong>good</strong> if it is <strong>strictly</strong> greater than the elements at indices <code>i - k</code> and <code>i + k</code> (if those indices exist). If neither of these indices <em>exists</em>, <code>nums[i]</code> is still considered <strong>good</strong>.</p>\n\n<p>Return the <strong>sum</strong> of all the <strong>good</strong> elements in the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,3,2,1,5,4], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">12</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The good numbers are <code>nums[1] = 3</code>, <code>nums[4] = 5</code>, and <code>nums[5] = 4</code> because they are strictly greater than the numbers at indices <code>i - k</code> and <code>i + k</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,1], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only good number is <code>nums[0] = 2</code> because it is strictly greater than <code>nums[1]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= k &lt;= floor(nums.length / 2)</code></li>\n</ul>\n",
    "difficulty": "Easy",
    "topicTags": [
      {
        "name": "Array",
        "slug": "array"
      }
    ],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int sumOfGoodNumbers(vector<int>& nums, int k) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int sumOfGoodNumbers(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def sumOfGoodNumbers(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def sumOfGoodNumbers(self, nums: List[int], k: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int sumOfGoodNumbers(int* nums, int numsSize, int k) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int SumOfGoodNumbers(int[] nums, int k) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfGoodNumbers = function(nums, k) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function sumOfGoodNumbers(nums: number[], k: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfGoodNumbers($nums, $k) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func sumOfGoodNumbers(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun sumOfGoodNumbers(nums: IntArray, k: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int sumOfGoodNumbers(List<int> nums, int k) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func sumOfGoodNumbers(nums []int, k int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_good_numbers(nums, k)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def sumOfGoodNumbers(nums: Array[Int], k: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn sum_of_good_numbers(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (sum-of-good-numbers nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec sum_of_good_numbers(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_good_numbers(Nums, K) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec sum_of_good_numbers(nums :: [integer], k :: integer) :: integer\n  def sum_of_good_numbers(nums, k) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,3,2,1,5,4]\n2"
  },
  {
    "questionId": "3722",
    "questionFrontendId": "3473",
    "title": "Sum of K Subarrays With Length at Least M",
    "titleSlug": "sum-of-k-subarrays-with-length-at-least-m",
    "content": "<p>You are given an integer array <code>nums</code> and two integers, <code>k</code> and <code>m</code>.</p>\n\n<p>Return the <strong>maximum</strong> sum of <code>k</code> non-overlapping <span data-keyword=\"subarray\">subarrays</span> of <code>nums</code>, where each subarray has a length of <strong>at least</strong> <code>m</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,-1,3,3,4], k = 2, m = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">13</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal choice is:</p>\n\n<ul>\n\t<li>Subarray <code>nums[3..5]</code> with sum <code>3 + 3 + 4 = 10</code> (length is <code>3 &gt;= m</code>).</li>\n\t<li>Subarray <code>nums[0..1]</code> with sum <code>1 + 2 = 3</code> (length is <code>2 &gt;= m</code>).</li>\n</ul>\n\n<p>The total sum is <code>10 + 3 = 13</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [-10,3,-1,-2], k = 4, m = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">-10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The optimal choice is choosing each element as a subarray. The output is <code>(-10) + 3 + (-1) + (-2) = -10</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= floor(nums.length / m)</code></li>\n\t<li><code>1 &lt;= m &lt;= 3</code></li>\n</ul>\n",
    "difficulty": "Medium",
    "topicTags": [],
    "codeSnippets": [
      {
        "lang": "C++",
        "langSlug": "cpp",
        "code": "class Solution {\npublic:\n    int maxSum(vector<int>& nums, int k, int m) {\n        \n    }\n};"
      },
      {
        "lang": "Java",
        "langSlug": "java",
        "code": "class Solution {\n    public int maxSum(int[] nums, int k, int m) {\n        \n    }\n}"
      },
      {
        "lang": "Python",
        "langSlug": "python",
        "code": "class Solution(object):\n    def maxSum(self, nums, k, m):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "
      },
      {
        "lang": "Python3",
        "langSlug": "python3",
        "code": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        "
      },
      {
        "lang": "C",
        "langSlug": "c",
        "code": "int maxSum(int* nums, int numsSize, int k, int m) {\n    \n}"
      },
      {
        "lang": "C#",
        "langSlug": "csharp",
        "code": "public class Solution {\n    public int MaxSum(int[] nums, int k, int m) {\n        \n    }\n}"
      },
      {
        "lang": "JavaScript",
        "langSlug": "javascript",
        "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} m\n * @return {number}\n */\nvar maxSum = function(nums, k, m) {\n    \n};"
      },
      {
        "lang": "TypeScript",
        "langSlug": "typescript",
        "code": "function maxSum(nums: number[], k: number, m: number): number {\n    \n};"
      },
      {
        "lang": "PHP",
        "langSlug": "php",
        "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $m\n     * @return Integer\n     */\n    function maxSum($nums, $k, $m) {\n        \n    }\n}"
      },
      {
        "lang": "Swift",
        "langSlug": "swift",
        "code": "class Solution {\n    func maxSum(_ nums: [Int], _ k: Int, _ m: Int) -> Int {\n        \n    }\n}"
      },
      {
        "lang": "Kotlin",
        "langSlug": "kotlin",
        "code": "class Solution {\n    fun maxSum(nums: IntArray, k: Int, m: Int): Int {\n        \n    }\n}"
      },
      {
        "lang": "Dart",
        "langSlug": "dart",
        "code": "class Solution {\n  int maxSum(List<int> nums, int k, int m) {\n    \n  }\n}"
      },
      {
        "lang": "Go",
        "langSlug": "golang",
        "code": "func maxSum(nums []int, k int, m int) int {\n    \n}"
      },
      {
        "lang": "Ruby",
        "langSlug": "ruby",
        "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} m\n# @return {Integer}\ndef max_sum(nums, k, m)\n    \nend"
      },
      {
        "lang": "Scala",
        "langSlug": "scala",
        "code": "object Solution {\n    def maxSum(nums: Array[Int], k: Int, m: Int): Int = {\n        \n    }\n}"
      },
      {
        "lang": "Rust",
        "langSlug": "rust",
        "code": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, k: i32, m: i32) -> i32 {\n        \n    }\n}"
      },
      {
        "lang": "Racket",
        "langSlug": "racket",
        "code": "(define/contract (max-sum nums k m)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )"
      },
      {
        "lang": "Erlang",
        "langSlug": "erlang",
        "code": "-spec max_sum(Nums :: [integer()], K :: integer(), M :: integer()) -> integer().\nmax_sum(Nums, K, M) ->\n  ."
      },
      {
        "lang": "Elixir",
        "langSlug": "elixir",
        "code": "defmodule Solution do\n  @spec max_sum(nums :: [integer], k :: integer, m :: integer) :: integer\n  def max_sum(nums, k, m) do\n    \n  end\nend"
      }
    ],
    "sampleTestCase": "[1,2,-1,3,3,4]\n2\n2"
  }
]